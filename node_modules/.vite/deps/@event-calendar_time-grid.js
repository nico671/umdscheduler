import {
  addDay,
  addDuration,
  ancestor,
  bgEvent,
  btnTextDay,
  btnTextWeek,
  cloneDate,
  createDate,
  createEventChunk,
  createEventClasses,
  createEventContent,
  createSlotTimeLimits,
  createTimes,
  datesEqual,
  debounce,
  eventIntersects,
  floor,
  ghostEvent,
  handleZeroDurationChunk,
  height,
  helperEvent,
  isFunction,
  keyEnter,
  prepareEventChunks,
  rect,
  repositionEvent,
  resourceBackgroundColor,
  resourceTextColor,
  runReposition,
  setContent,
  setMidnight,
  setPayload,
  sortEventChunks,
  subtractDuration,
  task,
  themeView,
  toEventWithLocalDates,
  toISOString,
  toViewWithLocalDates
} from "./chunk-DJCHSTZL.js";
import "./chunk-AYNHEKRI.js";
import {
  derived
} from "./chunk-ZITOXSUL.js";
import "./chunk-X7HCJ7ZS.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_location,
  afterUpdate,
  append_hydration_dev,
  attr_dev,
  binding_callbacks,
  check_outros,
  children,
  claim_component,
  claim_element,
  claim_space,
  component_subscribe,
  construct_svelte_component_dev,
  create_component,
  create_slot,
  destroy_component,
  destroy_each,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  ensure_array_like_dev,
  getContext,
  get_all_dirty_from_scope,
  get_slot_changes,
  group_outros,
  init,
  insert_hydration_dev,
  is_function,
  listen_dev,
  mount_component,
  noop,
  onMount,
  outro_and_destroy_block,
  run_all,
  safe_not_equal,
  set_store_value,
  set_style,
  space,
  transition_in,
  transition_out,
  update_keyed_each,
  update_slot_base,
  validate_each_keys,
  validate_slots,
  validate_store
} from "./chunk-EVUIGUWR.js";
import "./chunk-2GBBIY5G.js";
import "./chunk-F3FYYIAV.js";

// node_modules/@event-calendar/time-grid/src/stores.js
function times(state) {
  return derived(
    [state.slotDuration, state._slotTimeLimits, state._intlSlotLabel],
    (args) => createTimes(setMidnight(createDate()), ...args)
  );
}
function slotTimeLimits(state) {
  return derived(
    [state.slotMinTime, state.slotMaxTime, state.flexibleSlotTimeLimits, state._viewDates, state._events],
    (args) => createSlotTimeLimits(...args)
  );
}

// node_modules/@event-calendar/time-grid/src/utils.js
function groupEventChunks(chunks) {
  if (!chunks.length) {
    return;
  }
  sortEventChunks(chunks);
  let group = {
    columns: [],
    end: chunks[0].end
  };
  for (let chunk of chunks) {
    let c = 0;
    if (chunk.start < group.end) {
      for (; c < group.columns.length; ++c) {
        if (group.columns[c].at(-1).end <= chunk.start) {
          break;
        }
      }
      if (chunk.end > group.end) {
        group.end = chunk.end;
      }
    } else {
      group = {
        columns: [],
        end: chunk.end
      };
    }
    if (group.columns.length < c + 1) {
      group.columns.push([]);
    }
    group.columns[c].push(chunk);
    chunk.group = group;
    chunk.column = c;
  }
}
function createAllDayContent(allDayContent) {
  let text = "all-day";
  let content;
  if (allDayContent) {
    content = isFunction(allDayContent) ? allDayContent({ text }) : allDayContent;
    if (typeof content === "string") {
      content = { html: content };
    }
  } else {
    content = {
      html: text
    };
  }
  return content;
}

// node_modules/@event-calendar/time-grid/src/Section.svelte
var file = "node_modules/@event-calendar/time-grid/src/Section.svelte";
var get_lines_slot_changes = (dirty) => ({});
var get_lines_slot_context = (ctx) => ({});
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list[i];
  return child_ctx;
}
function create_each_block(ctx) {
  let time_1;
  let time_1_class_value;
  let time_1_datetime_value;
  let setContent_action;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      time_1 = element("time");
      this.h();
    },
    l: function claim(nodes) {
      time_1 = claim_element(nodes, "TIME", { class: true, datetime: true });
      children(time_1).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(time_1, "class", time_1_class_value = /*$theme*/
      ctx[1].time);
      attr_dev(time_1, "datetime", time_1_datetime_value = /*time*/
      ctx[9][0]);
      add_location(time_1, file, 14, 8, 446);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, time_1, anchor);
      if (!mounted) {
        dispose = action_destroyer(setContent_action = setContent.call(
          null,
          time_1,
          /*time*/
          ctx[9][2] ? (
            /*time*/
            ctx[9][1]
          ) : ""
        ));
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$theme*/
      2 && time_1_class_value !== (time_1_class_value = /*$theme*/
      ctx[1].time)) {
        attr_dev(time_1, "class", time_1_class_value);
      }
      if (dirty & /*$_times*/
      4 && time_1_datetime_value !== (time_1_datetime_value = /*time*/
      ctx[9][0])) {
        attr_dev(time_1, "datetime", time_1_datetime_value);
      }
      if (setContent_action && is_function(setContent_action.update) && dirty & /*$_times*/
      4)
        setContent_action.update.call(
          null,
          /*time*/
          ctx[9][2] ? (
            /*time*/
            ctx[9][1]
          ) : ""
        );
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(time_1);
      }
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(14:4) {#each $_times as time}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let div1;
  let div0;
  let div0_class_value;
  let setContent_action;
  let t0;
  let div1_class_value;
  let t1;
  let div3;
  let div2;
  let div2_class_value;
  let t2;
  let div3_class_value;
  let current;
  let mounted;
  let dispose;
  let each_value = ensure_array_like_dev(
    /*$_times*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const lines_slot_template = (
    /*#slots*/
    ctx[8].lines
  );
  const lines_slot = create_slot(
    lines_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_lines_slot_context
  );
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    null
  );
  const block = {
    c: function create() {
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t1 = space();
      div3 = element("div");
      div2 = element("div");
      if (lines_slot)
        lines_slot.c();
      t2 = space();
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      children(div0).forEach(detach_dev);
      t0 = claim_space(div1_nodes);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(div1_nodes);
      }
      div1_nodes.forEach(detach_dev);
      t1 = claim_space(nodes);
      div3 = claim_element(nodes, "DIV", { class: true, role: true });
      var div3_nodes = children(div3);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      if (lines_slot)
        lines_slot.l(div2_nodes);
      div2_nodes.forEach(detach_dev);
      t2 = claim_space(div3_nodes);
      if (default_slot)
        default_slot.l(div3_nodes);
      div3_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", div0_class_value = /*$theme*/
      ctx[1].sidebarTitle);
      add_location(div0, file, 12, 4, 340);
      attr_dev(div1, "class", div1_class_value = /*$theme*/
      ctx[1].sidebar);
      add_location(div1, file, 11, 0, 305);
      attr_dev(div2, "class", div2_class_value = /*$theme*/
      ctx[1].lines);
      add_location(div2, file, 18, 4, 605);
      attr_dev(div3, "class", div3_class_value = /*$theme*/
      ctx[1].days);
      attr_dev(div3, "role", "row");
      add_location(div3, file, 17, 0, 562);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div1, anchor);
      append_hydration_dev(div1, div0);
      append_hydration_dev(div1, t0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div1, null);
        }
      }
      insert_hydration_dev(target, t1, anchor);
      insert_hydration_dev(target, div3, anchor);
      append_hydration_dev(div3, div2);
      if (lines_slot) {
        lines_slot.m(div2, null);
      }
      append_hydration_dev(div3, t2);
      if (default_slot) {
        default_slot.m(div3, null);
      }
      current = true;
      if (!mounted) {
        dispose = action_destroyer(setContent_action = setContent.call(
          null,
          div0,
          /*allDayText*/
          ctx[0]
        ));
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (!current || dirty & /*$theme*/
      2 && div0_class_value !== (div0_class_value = /*$theme*/
      ctx2[1].sidebarTitle)) {
        attr_dev(div0, "class", div0_class_value);
      }
      if (setContent_action && is_function(setContent_action.update) && dirty & /*allDayText*/
      1)
        setContent_action.update.call(
          null,
          /*allDayText*/
          ctx2[0]
        );
      if (dirty & /*$theme, $_times*/
      6) {
        each_value = ensure_array_like_dev(
          /*$_times*/
          ctx2[2]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div1, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (!current || dirty & /*$theme*/
      2 && div1_class_value !== (div1_class_value = /*$theme*/
      ctx2[1].sidebar)) {
        attr_dev(div1, "class", div1_class_value);
      }
      if (lines_slot) {
        if (lines_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            lines_slot,
            lines_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              lines_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_lines_slot_changes
            ),
            get_lines_slot_context
          );
        }
      }
      if (!current || dirty & /*$theme*/
      2 && div2_class_value !== (div2_class_value = /*$theme*/
      ctx2[1].lines)) {
        attr_dev(div2, "class", div2_class_value);
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*$theme*/
      2 && div3_class_value !== (div3_class_value = /*$theme*/
      ctx2[1].days)) {
        attr_dev(div3, "class", div3_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(lines_slot, local);
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(lines_slot, local);
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div1);
        detach_dev(t1);
        detach_dev(div3);
      }
      destroy_each(each_blocks, detaching);
      if (lines_slot)
        lines_slot.d(detaching);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let $allDayContent;
  let $theme;
  let $_times;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Section", slots, ["lines", "default"]);
  let { allDayContent, theme, _times } = getContext("state");
  validate_store(allDayContent, "allDayContent");
  component_subscribe($$self, allDayContent, (value) => $$invalidate(6, $allDayContent = value));
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(1, $theme = value));
  validate_store(_times, "_times");
  component_subscribe($$self, _times, (value) => $$invalidate(2, $_times = value));
  let allDayText;
  const writable_props = [];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Section> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2)
      $$invalidate(7, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    getContext,
    setContent,
    createAllDayContent,
    allDayContent,
    theme,
    _times,
    allDayText,
    $allDayContent,
    $theme,
    $_times
  });
  $$self.$inject_state = ($$props2) => {
    if ("allDayContent" in $$props2)
      $$invalidate(3, allDayContent = $$props2.allDayContent);
    if ("theme" in $$props2)
      $$invalidate(4, theme = $$props2.theme);
    if ("_times" in $$props2)
      $$invalidate(5, _times = $$props2._times);
    if ("allDayText" in $$props2)
      $$invalidate(0, allDayText = $$props2.allDayText);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$allDayContent*/
    64) {
      $:
        $$invalidate(0, allDayText = createAllDayContent($allDayContent));
    }
  };
  return [
    allDayText,
    $theme,
    $_times,
    allDayContent,
    theme,
    _times,
    $allDayContent,
    $$scope,
    slots
  ];
}
var Section = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Section",
      options,
      id: create_fragment.name
    });
  }
};
var Section_default = Section;

// node_modules/@event-calendar/time-grid/src/Body.svelte
var file2 = "node_modules/@event-calendar/time-grid/src/Body.svelte";
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[23] = list[i];
  return child_ctx;
}
function create_default_slot(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[16].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[18],
    null
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        262144)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[18],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[18]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[18],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(34:8) <Section>",
    ctx
  });
  return block;
}
function create_each_block2(ctx) {
  let div;
  let div_class_value;
  const block = {
    c: function create() {
      div = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", div_class_value = /*$theme*/
      ctx[3].line);
      add_location(div, file2, 36, 20, 896);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*$theme*/
      8 && div_class_value !== (div_class_value = /*$theme*/
      ctx2[3].line)) {
        attr_dev(div, "class", div_class_value);
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block2.name,
    type: "each",
    source: "(36:16) {#each lines as line}",
    ctx
  });
  return block;
}
function create_lines_slot(ctx) {
  let each_1_anchor;
  let each_value = ensure_array_like_dev(
    /*lines*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block2(get_each_context2(ctx, each_value, i));
  }
  const block = {
    c: function create() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    l: function claim(nodes) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(nodes);
      }
      each_1_anchor = empty();
    },
    m: function mount(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert_hydration_dev(target, each_1_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*$theme, lines*/
      12) {
        each_value = ensure_array_like_dev(
          /*lines*/
          ctx2[2]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context2(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block2(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_lines_slot.name,
    type: "slot",
    source: '(35:12) <svelte:fragment slot=\\"lines\\">',
    ctx
  });
  return block;
}
function create_fragment2(ctx) {
  let div1;
  let div0;
  let section;
  let div0_class_value;
  let div1_class_value;
  let current;
  section = new Section_default({
    props: {
      $$slots: {
        lines: [create_lines_slot],
        default: [create_default_slot]
      },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      div1 = element("div");
      div0 = element("div");
      create_component(section.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      claim_component(section.$$.fragment, div0_nodes);
      div0_nodes.forEach(detach_dev);
      div1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", div0_class_value = /*$theme*/
      ctx[3].content);
      add_location(div0, file2, 32, 4, 746);
      attr_dev(div1, "class", div1_class_value = /*$theme*/
      ctx[3].body + /*compact*/
      (ctx[1] ? " " + /*$theme*/
      ctx[3].compact : ""));
      add_location(div1, file2, 28, 0, 653);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div1, anchor);
      append_hydration_dev(div1, div0);
      mount_component(section, div0, null);
      ctx[17](div1);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const section_changes = {};
      if (dirty & /*$$scope, lines, $theme*/
      262156) {
        section_changes.$$scope = { dirty, ctx: ctx2 };
      }
      section.$set(section_changes);
      if (!current || dirty & /*$theme*/
      8 && div0_class_value !== (div0_class_value = /*$theme*/
      ctx2[3].content)) {
        attr_dev(div0, "class", div0_class_value);
      }
      if (!current || dirty & /*$theme, compact*/
      10 && div1_class_value !== (div1_class_value = /*$theme*/
      ctx2[3].body + /*compact*/
      (ctx2[1] ? " " + /*$theme*/
      ctx2[3].compact : ""))) {
        attr_dev(div1, "class", div1_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(section.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(section.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div1);
      }
      destroy_component(section);
      ctx[17](null);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance2($$self, $$props, $$invalidate) {
  let $slotHeight;
  let $slotDuration;
  let $_slotTimeLimits;
  let $scrollTime;
  let $_viewDates;
  let $_times;
  let $_bodyEl;
  let $theme;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Body", slots, ["default"]);
  let { _bodyEl, _viewDates, _slotTimeLimits, _times, scrollTime, slotDuration, slotHeight, theme } = getContext("state");
  validate_store(_bodyEl, "_bodyEl");
  component_subscribe($$self, _bodyEl, (value) => $$invalidate(21, $_bodyEl = value));
  validate_store(_viewDates, "_viewDates");
  component_subscribe($$self, _viewDates, (value) => $$invalidate(14, $_viewDates = value));
  validate_store(_slotTimeLimits, "_slotTimeLimits");
  component_subscribe($$self, _slotTimeLimits, (value) => $$invalidate(20, $_slotTimeLimits = value));
  validate_store(_times, "_times");
  component_subscribe($$self, _times, (value) => $$invalidate(15, $_times = value));
  validate_store(scrollTime, "scrollTime");
  component_subscribe($$self, scrollTime, (value) => $$invalidate(13, $scrollTime = value));
  validate_store(slotDuration, "slotDuration");
  component_subscribe($$self, slotDuration, (value) => $$invalidate(12, $slotDuration = value));
  validate_store(slotHeight, "slotHeight");
  component_subscribe($$self, slotHeight, (value) => $$invalidate(19, $slotHeight = value));
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(3, $theme = value));
  let el;
  let compact;
  let lines = [];
  function scrollToTime() {
    $$invalidate(0, el.scrollTop = (($scrollTime.seconds - $_slotTimeLimits.min.seconds) / $slotDuration.seconds - 0.5) * $slotHeight, el);
  }
  const writable_props = [];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Body> was created with unknown prop '${key}'`);
  });
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate(0, el);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2)
      $$invalidate(18, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    getContext,
    Section: Section_default,
    _bodyEl,
    _viewDates,
    _slotTimeLimits,
    _times,
    scrollTime,
    slotDuration,
    slotHeight,
    theme,
    el,
    compact,
    lines,
    scrollToTime,
    $slotHeight,
    $slotDuration,
    $_slotTimeLimits,
    $scrollTime,
    $_viewDates,
    $_times,
    $_bodyEl,
    $theme
  });
  $$self.$inject_state = ($$props2) => {
    if ("_bodyEl" in $$props2)
      $$invalidate(4, _bodyEl = $$props2._bodyEl);
    if ("_viewDates" in $$props2)
      $$invalidate(5, _viewDates = $$props2._viewDates);
    if ("_slotTimeLimits" in $$props2)
      $$invalidate(6, _slotTimeLimits = $$props2._slotTimeLimits);
    if ("_times" in $$props2)
      $$invalidate(7, _times = $$props2._times);
    if ("scrollTime" in $$props2)
      $$invalidate(8, scrollTime = $$props2.scrollTime);
    if ("slotDuration" in $$props2)
      $$invalidate(9, slotDuration = $$props2.slotDuration);
    if ("slotHeight" in $$props2)
      $$invalidate(10, slotHeight = $$props2.slotHeight);
    if ("theme" in $$props2)
      $$invalidate(11, theme = $$props2.theme);
    if ("el" in $$props2)
      $$invalidate(0, el = $$props2.el);
    if ("compact" in $$props2)
      $$invalidate(1, compact = $$props2.compact);
    if ("lines" in $$props2)
      $$invalidate(2, lines = $$props2.lines);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*el*/
    1) {
      $:
        set_store_value(_bodyEl, $_bodyEl = el, $_bodyEl);
    }
    if ($$self.$$.dirty & /*$slotDuration, $_times*/
    36864) {
      $: {
        $$invalidate(1, compact = $slotDuration.seconds >= 3600);
        $$invalidate(2, lines.length = $_times.length, lines);
      }
    }
    if ($$self.$$.dirty & /*el, $_viewDates, $scrollTime*/
    24577) {
      $:
        if (el) {
          $_viewDates;
          $scrollTime;
          scrollToTime();
        }
    }
  };
  return [
    el,
    compact,
    lines,
    $theme,
    _bodyEl,
    _viewDates,
    _slotTimeLimits,
    _times,
    scrollTime,
    slotDuration,
    slotHeight,
    theme,
    $slotDuration,
    $scrollTime,
    $_viewDates,
    $_times,
    slots,
    div1_binding,
    $$scope
  ];
}
var Body = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance2, create_fragment2, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Body",
      options,
      id: create_fragment2.name
    });
  }
};
var Body_default = Body;

// node_modules/@event-calendar/time-grid/src/Event.svelte
var file3 = "node_modules/@event-calendar/time-grid/src/Event.svelte";
function create_fragment3(ctx) {
  let article;
  let switch_instance0;
  let t0;
  let div;
  let div_class_value;
  let setContent_action;
  let t1;
  let switch_instance1;
  let article_role_value;
  let article_tabindex_value;
  let current;
  let mounted;
  let dispose;
  var switch_value = (
    /*$_interaction*/
    ctx[10].resizer
  );
  function switch_props(ctx2, dirty) {
    return {
      props: { start: true, event: (
        /*event*/
        ctx2[0]
      ) },
      $$inline: true
    };
  }
  if (switch_value) {
    switch_instance0 = construct_svelte_component_dev(switch_value, switch_props(ctx));
    switch_instance0.$on("pointerdown", function() {
      if (is_function(
        /*createDragHandler*/
        ctx[33](
          /*$_interaction*/
          ctx[10],
          ["y", "start"]
        )
      ))
        ctx[33](
          /*$_interaction*/
          ctx[10],
          ["y", "start"]
        ).apply(this, arguments);
    });
  }
  var switch_value_1 = (
    /*$_interaction*/
    ctx[10].resizer
  );
  function switch_props_1(ctx2, dirty) {
    return {
      props: { event: (
        /*event*/
        ctx2[0]
      ) },
      $$inline: true
    };
  }
  if (switch_value_1) {
    switch_instance1 = construct_svelte_component_dev(switch_value_1, switch_props_1(ctx));
    switch_instance1.$on("pointerdown", function() {
      if (is_function(
        /*createDragHandler*/
        ctx[33](
          /*$_interaction*/
          ctx[10],
          ["y", "end"]
        )
      ))
        ctx[33](
          /*$_interaction*/
          ctx[10],
          ["y", "end"]
        ).apply(this, arguments);
    });
  }
  const block = {
    c: function create() {
      article = element("article");
      if (switch_instance0)
        create_component(switch_instance0.$$.fragment);
      t0 = space();
      div = element("div");
      t1 = space();
      if (switch_instance1)
        create_component(switch_instance1.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      article = claim_element(nodes, "ARTICLE", {
        class: true,
        style: true,
        role: true,
        tabindex: true
      });
      var article_nodes = children(article);
      if (switch_instance0)
        claim_component(switch_instance0.$$.fragment, article_nodes);
      t0 = claim_space(article_nodes);
      div = claim_element(article_nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      t1 = claim_space(article_nodes);
      if (switch_instance1)
        claim_component(switch_instance1.$$.fragment, article_nodes);
      article_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", div_class_value = /*$theme*/
      ctx[2].eventBody);
      add_location(div, file3, 139, 4, 4720);
      attr_dev(
        article,
        "class",
        /*classes*/
        ctx[4]
      );
      attr_dev(
        article,
        "style",
        /*style*/
        ctx[5]
      );
      attr_dev(article, "role", article_role_value = /*onclick*/
      ctx[7] ? "button" : void 0);
      attr_dev(article, "tabindex", article_tabindex_value = /*onclick*/
      ctx[7] ? 0 : void 0);
      add_location(article, file3, 121, 0, 4106);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, article, anchor);
      if (switch_instance0)
        mount_component(switch_instance0, article, null);
      append_hydration_dev(article, t0);
      append_hydration_dev(article, div);
      append_hydration_dev(article, t1);
      if (switch_instance1)
        mount_component(switch_instance1, article, null);
      ctx[51](article);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(setContent_action = setContent.call(
            null,
            div,
            /*content*/
            ctx[6]
          )),
          listen_dev(
            article,
            "click",
            function() {
              if (is_function(
                /*onclick*/
                ctx[7]
              ))
                ctx[7].apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            article,
            "keydown",
            function() {
              if (is_function(
                /*onclick*/
                ctx[7] && keyEnter(
                  /*onclick*/
                  ctx[7]
                )
              ))
                /*onclick*/
                (ctx[7] && keyEnter(
                  /*onclick*/
                  ctx[7]
                )).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            article,
            "mouseenter",
            function() {
              if (is_function(
                /*createHandler*/
                ctx[32](
                  /*$eventMouseEnter*/
                  ctx[8],
                  /*display*/
                  ctx[1]
                )
              ))
                ctx[32](
                  /*$eventMouseEnter*/
                  ctx[8],
                  /*display*/
                  ctx[1]
                ).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            article,
            "mouseleave",
            function() {
              if (is_function(
                /*createHandler*/
                ctx[32](
                  /*$eventMouseLeave*/
                  ctx[9],
                  /*display*/
                  ctx[1]
                )
              ))
                ctx[32](
                  /*$eventMouseLeave*/
                  ctx[9],
                  /*display*/
                  ctx[1]
                ).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            article,
            "pointerdown",
            function() {
              if (is_function(!bgEvent(
                /*display*/
                ctx[1]
              ) && !helperEvent(
                /*display*/
                ctx[1]
              ) && /*createDragHandler*/
              ctx[33](
                /*$_interaction*/
                ctx[10]
              )))
                (!bgEvent(
                  /*display*/
                  ctx[1]
                ) && !helperEvent(
                  /*display*/
                  ctx[1]
                ) && /*createDragHandler*/
                ctx[33](
                  /*$_interaction*/
                  ctx[10]
                )).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*$_interaction*/
      1024 && switch_value !== (switch_value = /*$_interaction*/
      ctx[10].resizer)) {
        if (switch_instance0) {
          group_outros();
          const old_component = switch_instance0;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance0 = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
          switch_instance0.$on("pointerdown", function() {
            if (is_function(
              /*createDragHandler*/
              ctx[33](
                /*$_interaction*/
                ctx[10],
                ["y", "start"]
              )
            ))
              ctx[33](
                /*$_interaction*/
                ctx[10],
                ["y", "start"]
              ).apply(this, arguments);
          });
          create_component(switch_instance0.$$.fragment);
          transition_in(switch_instance0.$$.fragment, 1);
          mount_component(switch_instance0, article, t0);
        } else {
          switch_instance0 = null;
        }
      } else if (switch_value) {
        const switch_instance0_changes = {};
        if (dirty[0] & /*event*/
        1)
          switch_instance0_changes.event = /*event*/
          ctx[0];
        switch_instance0.$set(switch_instance0_changes);
      }
      if (!current || dirty[0] & /*$theme*/
      4 && div_class_value !== (div_class_value = /*$theme*/
      ctx[2].eventBody)) {
        attr_dev(div, "class", div_class_value);
      }
      if (setContent_action && is_function(setContent_action.update) && dirty[0] & /*content*/
      64)
        setContent_action.update.call(
          null,
          /*content*/
          ctx[6]
        );
      if (dirty[0] & /*$_interaction*/
      1024 && switch_value_1 !== (switch_value_1 = /*$_interaction*/
      ctx[10].resizer)) {
        if (switch_instance1) {
          group_outros();
          const old_component = switch_instance1;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value_1) {
          switch_instance1 = construct_svelte_component_dev(switch_value_1, switch_props_1(ctx, dirty));
          switch_instance1.$on("pointerdown", function() {
            if (is_function(
              /*createDragHandler*/
              ctx[33](
                /*$_interaction*/
                ctx[10],
                ["y", "end"]
              )
            ))
              ctx[33](
                /*$_interaction*/
                ctx[10],
                ["y", "end"]
              ).apply(this, arguments);
          });
          create_component(switch_instance1.$$.fragment);
          transition_in(switch_instance1.$$.fragment, 1);
          mount_component(switch_instance1, article, null);
        } else {
          switch_instance1 = null;
        }
      } else if (switch_value_1) {
        const switch_instance1_changes = {};
        if (dirty[0] & /*event*/
        1)
          switch_instance1_changes.event = /*event*/
          ctx[0];
        switch_instance1.$set(switch_instance1_changes);
      }
      if (!current || dirty[0] & /*classes*/
      16) {
        attr_dev(
          article,
          "class",
          /*classes*/
          ctx[4]
        );
      }
      if (!current || dirty[0] & /*style*/
      32) {
        attr_dev(
          article,
          "style",
          /*style*/
          ctx[5]
        );
      }
      if (!current || dirty[0] & /*onclick*/
      128 && article_role_value !== (article_role_value = /*onclick*/
      ctx[7] ? "button" : void 0)) {
        attr_dev(article, "role", article_role_value);
      }
      if (!current || dirty[0] & /*onclick*/
      128 && article_tabindex_value !== (article_tabindex_value = /*onclick*/
      ctx[7] ? 0 : void 0)) {
        attr_dev(article, "tabindex", article_tabindex_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      if (switch_instance0)
        transition_in(switch_instance0.$$.fragment, local);
      if (switch_instance1)
        transition_in(switch_instance1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance0)
        transition_out(switch_instance0.$$.fragment, local);
      if (switch_instance1)
        transition_out(switch_instance1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(article);
      }
      if (switch_instance0)
        destroy_component(switch_instance0);
      if (switch_instance1)
        destroy_component(switch_instance1);
      ctx[51](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self, $$props, $$invalidate) {
  let $eventClick;
  let $slotDuration;
  let $_view;
  let $eventAllUpdated;
  let $eventDidMount;
  let $_intlEventTime;
  let $theme;
  let $eventContent;
  let $displayEventEnd;
  let $eventClassNames;
  let $_iClasses;
  let $slotEventOverlap;
  let $eventTextColor;
  let $resources;
  let $eventColor;
  let $eventBackgroundColor;
  let $slotHeight;
  let $_slotTimeLimits;
  let $eventMouseEnter;
  let $eventMouseLeave;
  let $_interaction;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Event", slots, []);
  let { date } = $$props;
  let { chunk } = $$props;
  let { displayEventEnd, eventAllUpdated, eventBackgroundColor, eventTextColor, eventColor, eventContent, eventClick, eventDidMount, eventClassNames, eventMouseEnter, eventMouseLeave, slotEventOverlap, slotDuration, slotHeight, resources, theme, _view, _intlEventTime, _interaction, _iClasses, _slotTimeLimits, _tasks } = getContext("state");
  validate_store(displayEventEnd, "displayEventEnd");
  component_subscribe($$self, displayEventEnd, (value) => $$invalidate(41, $displayEventEnd = value));
  validate_store(eventAllUpdated, "eventAllUpdated");
  component_subscribe($$self, eventAllUpdated, (value) => $$invalidate(53, $eventAllUpdated = value));
  validate_store(eventBackgroundColor, "eventBackgroundColor");
  component_subscribe($$self, eventBackgroundColor, (value) => $$invalidate(48, $eventBackgroundColor = value));
  validate_store(eventTextColor, "eventTextColor");
  component_subscribe($$self, eventTextColor, (value) => $$invalidate(45, $eventTextColor = value));
  validate_store(eventColor, "eventColor");
  component_subscribe($$self, eventColor, (value) => $$invalidate(47, $eventColor = value));
  validate_store(eventContent, "eventContent");
  component_subscribe($$self, eventContent, (value) => $$invalidate(40, $eventContent = value));
  validate_store(eventClick, "eventClick");
  component_subscribe($$self, eventClick, (value) => $$invalidate(36, $eventClick = value));
  validate_store(eventDidMount, "eventDidMount");
  component_subscribe($$self, eventDidMount, (value) => $$invalidate(54, $eventDidMount = value));
  validate_store(eventClassNames, "eventClassNames");
  component_subscribe($$self, eventClassNames, (value) => $$invalidate(42, $eventClassNames = value));
  validate_store(eventMouseEnter, "eventMouseEnter");
  component_subscribe($$self, eventMouseEnter, (value) => $$invalidate(8, $eventMouseEnter = value));
  validate_store(eventMouseLeave, "eventMouseLeave");
  component_subscribe($$self, eventMouseLeave, (value) => $$invalidate(9, $eventMouseLeave = value));
  validate_store(slotEventOverlap, "slotEventOverlap");
  component_subscribe($$self, slotEventOverlap, (value) => $$invalidate(44, $slotEventOverlap = value));
  validate_store(slotDuration, "slotDuration");
  component_subscribe($$self, slotDuration, (value) => $$invalidate(37, $slotDuration = value));
  validate_store(slotHeight, "slotHeight");
  component_subscribe($$self, slotHeight, (value) => $$invalidate(49, $slotHeight = value));
  validate_store(resources, "resources");
  component_subscribe($$self, resources, (value) => $$invalidate(46, $resources = value));
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(2, $theme = value));
  validate_store(_view, "_view");
  component_subscribe($$self, _view, (value) => $$invalidate(38, $_view = value));
  validate_store(_intlEventTime, "_intlEventTime");
  component_subscribe($$self, _intlEventTime, (value) => $$invalidate(39, $_intlEventTime = value));
  validate_store(_interaction, "_interaction");
  component_subscribe($$self, _interaction, (value) => $$invalidate(10, $_interaction = value));
  validate_store(_iClasses, "_iClasses");
  component_subscribe($$self, _iClasses, (value) => $$invalidate(43, $_iClasses = value));
  validate_store(_slotTimeLimits, "_slotTimeLimits");
  component_subscribe($$self, _slotTimeLimits, (value) => $$invalidate(50, $_slotTimeLimits = value));
  let el;
  let event;
  let display;
  let classes;
  let style;
  let content;
  let timeText;
  let onclick;
  onMount(() => {
    if (isFunction($eventDidMount)) {
      $eventDidMount({
        event: toEventWithLocalDates(event),
        timeText,
        el,
        view: toViewWithLocalDates($_view)
      });
    }
  });
  afterUpdate(() => {
    if (isFunction($eventAllUpdated) && !helperEvent(display)) {
      task(() => $eventAllUpdated({ view: toViewWithLocalDates($_view) }), "eau", _tasks);
    }
  });
  function createHandler(fn, display2) {
    return !helperEvent(display2) && isFunction(fn) ? (jsEvent) => fn({
      event: toEventWithLocalDates(event),
      el,
      jsEvent,
      view: toViewWithLocalDates($_view)
    }) : void 0;
  }
  function createDragHandler(interaction, resize) {
    return interaction.action ? (jsEvent) => interaction.action.drag(event, jsEvent, resize, resize && chunk.zeroDuration ? subtractDuration(cloneDate(event.end), $slotDuration) : void 0) : void 0;
  }
  $$self.$$.on_mount.push(function() {
    if (date === void 0 && !("date" in $$props || $$self.$$.bound[$$self.$$.props["date"]])) {
      console.warn("<Event> was created without expected prop 'date'");
    }
    if (chunk === void 0 && !("chunk" in $$props || $$self.$$.bound[$$self.$$.props["chunk"]])) {
      console.warn("<Event> was created without expected prop 'chunk'");
    }
  });
  const writable_props = ["date", "chunk"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Event> was created with unknown prop '${key}'`);
  });
  function article_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate(3, el);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("date" in $$props2)
      $$invalidate(34, date = $$props2.date);
    if ("chunk" in $$props2)
      $$invalidate(35, chunk = $$props2.chunk);
  };
  $$self.$capture_state = () => ({
    afterUpdate,
    getContext,
    onMount,
    createEventContent,
    createEventClasses,
    toEventWithLocalDates,
    toViewWithLocalDates,
    setContent,
    bgEvent,
    helperEvent,
    ghostEvent,
    keyEnter,
    resourceBackgroundColor,
    resourceTextColor,
    task,
    isFunction,
    cloneDate,
    subtractDuration,
    date,
    chunk,
    displayEventEnd,
    eventAllUpdated,
    eventBackgroundColor,
    eventTextColor,
    eventColor,
    eventContent,
    eventClick,
    eventDidMount,
    eventClassNames,
    eventMouseEnter,
    eventMouseLeave,
    slotEventOverlap,
    slotDuration,
    slotHeight,
    resources,
    theme,
    _view,
    _intlEventTime,
    _interaction,
    _iClasses,
    _slotTimeLimits,
    _tasks,
    el,
    event,
    display,
    classes,
    style,
    content,
    timeText,
    onclick,
    createHandler,
    createDragHandler,
    $eventClick,
    $slotDuration,
    $_view,
    $eventAllUpdated,
    $eventDidMount,
    $_intlEventTime,
    $theme,
    $eventContent,
    $displayEventEnd,
    $eventClassNames,
    $_iClasses,
    $slotEventOverlap,
    $eventTextColor,
    $resources,
    $eventColor,
    $eventBackgroundColor,
    $slotHeight,
    $_slotTimeLimits,
    $eventMouseEnter,
    $eventMouseLeave,
    $_interaction
  });
  $$self.$inject_state = ($$props2) => {
    if ("date" in $$props2)
      $$invalidate(34, date = $$props2.date);
    if ("chunk" in $$props2)
      $$invalidate(35, chunk = $$props2.chunk);
    if ("displayEventEnd" in $$props2)
      $$invalidate(11, displayEventEnd = $$props2.displayEventEnd);
    if ("eventAllUpdated" in $$props2)
      $$invalidate(12, eventAllUpdated = $$props2.eventAllUpdated);
    if ("eventBackgroundColor" in $$props2)
      $$invalidate(13, eventBackgroundColor = $$props2.eventBackgroundColor);
    if ("eventTextColor" in $$props2)
      $$invalidate(14, eventTextColor = $$props2.eventTextColor);
    if ("eventColor" in $$props2)
      $$invalidate(15, eventColor = $$props2.eventColor);
    if ("eventContent" in $$props2)
      $$invalidate(16, eventContent = $$props2.eventContent);
    if ("eventClick" in $$props2)
      $$invalidate(17, eventClick = $$props2.eventClick);
    if ("eventDidMount" in $$props2)
      $$invalidate(18, eventDidMount = $$props2.eventDidMount);
    if ("eventClassNames" in $$props2)
      $$invalidate(19, eventClassNames = $$props2.eventClassNames);
    if ("eventMouseEnter" in $$props2)
      $$invalidate(20, eventMouseEnter = $$props2.eventMouseEnter);
    if ("eventMouseLeave" in $$props2)
      $$invalidate(21, eventMouseLeave = $$props2.eventMouseLeave);
    if ("slotEventOverlap" in $$props2)
      $$invalidate(22, slotEventOverlap = $$props2.slotEventOverlap);
    if ("slotDuration" in $$props2)
      $$invalidate(23, slotDuration = $$props2.slotDuration);
    if ("slotHeight" in $$props2)
      $$invalidate(24, slotHeight = $$props2.slotHeight);
    if ("resources" in $$props2)
      $$invalidate(25, resources = $$props2.resources);
    if ("theme" in $$props2)
      $$invalidate(26, theme = $$props2.theme);
    if ("_view" in $$props2)
      $$invalidate(27, _view = $$props2._view);
    if ("_intlEventTime" in $$props2)
      $$invalidate(28, _intlEventTime = $$props2._intlEventTime);
    if ("_interaction" in $$props2)
      $$invalidate(29, _interaction = $$props2._interaction);
    if ("_iClasses" in $$props2)
      $$invalidate(30, _iClasses = $$props2._iClasses);
    if ("_slotTimeLimits" in $$props2)
      $$invalidate(31, _slotTimeLimits = $$props2._slotTimeLimits);
    if ("_tasks" in $$props2)
      _tasks = $$props2._tasks;
    if ("el" in $$props2)
      $$invalidate(3, el = $$props2.el);
    if ("event" in $$props2)
      $$invalidate(0, event = $$props2.event);
    if ("display" in $$props2)
      $$invalidate(1, display = $$props2.display);
    if ("classes" in $$props2)
      $$invalidate(4, classes = $$props2.classes);
    if ("style" in $$props2)
      $$invalidate(5, style = $$props2.style);
    if ("content" in $$props2)
      $$invalidate(6, content = $$props2.content);
    if ("timeText" in $$props2)
      timeText = $$props2.timeText;
    if ("onclick" in $$props2)
      $$invalidate(7, onclick = $$props2.onclick);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[1] & /*chunk*/
    16) {
      $:
        $$invalidate(0, event = chunk.event);
    }
    if ($$self.$$.dirty[0] & /*event, style, display, $theme*/
    39 | $$self.$$.dirty[1] & /*$slotDuration, $_slotTimeLimits, chunk, date, $slotHeight, $resources, $eventBackgroundColor, $eventColor, $eventTextColor, $slotEventOverlap, $_iClasses, $eventClassNames, $_view*/
    1046744) {
      $: {
        $$invalidate(1, display = event.display);
        let step = $slotDuration.seconds;
        let offset = $_slotTimeLimits.min.seconds;
        let start = (chunk.start - date) / 1e3;
        let end = (chunk.end - date) / 1e3;
        let top = (start - offset) / step * $slotHeight;
        let height2 = (end - start) / step * $slotHeight;
        let maxHeight = ($_slotTimeLimits.max.seconds - start) / step * $slotHeight;
        let bgColor = event.backgroundColor || resourceBackgroundColor(event, $resources) || $eventBackgroundColor || $eventColor;
        let txtColor = event.textColor || resourceTextColor(event, $resources) || $eventTextColor;
        $$invalidate(5, style = `top:${top}px;min-height:${height2}px;height:${height2}px;max-height:${maxHeight}px;`);
        if (bgColor) {
          $$invalidate(5, style += `background-color:${bgColor};`);
        }
        if (txtColor) {
          $$invalidate(5, style += `color:${txtColor};`);
        }
        if (!bgEvent(display) && !helperEvent(display) || ghostEvent(display)) {
          $$invalidate(5, style += `z-index:${chunk.column + 1};left:${100 / chunk.group.columns.length * chunk.column}%;width:${100 / chunk.group.columns.length * ($slotEventOverlap ? 0.5 * (1 + chunk.group.columns.length - chunk.column) : 1)}%;`);
        }
        $$invalidate(5, style += event.styles.join(";"));
        $$invalidate(4, classes = [
          bgEvent(display) ? $theme.bgEvent : $theme.event,
          ...$_iClasses([], event),
          ...createEventClasses($eventClassNames, event, $_view)
        ].join(" "));
      }
    }
    if ($$self.$$.dirty[0] & /*$theme*/
    4 | $$self.$$.dirty[1] & /*chunk, $displayEventEnd, $eventContent, $_intlEventTime, $_view*/
    1936) {
      $:
        $$invalidate(6, [timeText, content] = createEventContent(chunk, $displayEventEnd, $eventContent, $theme, $_intlEventTime, $_view), content);
    }
    if ($$self.$$.dirty[0] & /*display*/
    2 | $$self.$$.dirty[1] & /*$eventClick*/
    32) {
      $:
        $$invalidate(7, onclick = !bgEvent(display) && createHandler($eventClick, display));
    }
  };
  return [
    event,
    display,
    $theme,
    el,
    classes,
    style,
    content,
    onclick,
    $eventMouseEnter,
    $eventMouseLeave,
    $_interaction,
    displayEventEnd,
    eventAllUpdated,
    eventBackgroundColor,
    eventTextColor,
    eventColor,
    eventContent,
    eventClick,
    eventDidMount,
    eventClassNames,
    eventMouseEnter,
    eventMouseLeave,
    slotEventOverlap,
    slotDuration,
    slotHeight,
    resources,
    theme,
    _view,
    _intlEventTime,
    _interaction,
    _iClasses,
    _slotTimeLimits,
    createHandler,
    createDragHandler,
    date,
    chunk,
    $eventClick,
    $slotDuration,
    $_view,
    $_intlEventTime,
    $eventContent,
    $displayEventEnd,
    $eventClassNames,
    $_iClasses,
    $slotEventOverlap,
    $eventTextColor,
    $resources,
    $eventColor,
    $eventBackgroundColor,
    $slotHeight,
    $_slotTimeLimits,
    article_binding
  ];
}
var Event = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance3, create_fragment3, safe_not_equal, { date: 34, chunk: 35 }, null, [-1, -1]);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Event",
      options,
      id: create_fragment3.name
    });
  }
  get date() {
    throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set date(value) {
    throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get chunk() {
    throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set chunk(value) {
    throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Event_default = Event;

// node_modules/@event-calendar/time-grid/src/NowIndicator.svelte
var file4 = "node_modules/@event-calendar/time-grid/src/NowIndicator.svelte";
function create_fragment4(ctx) {
  let div;
  let div_class_value;
  const block = {
    c: function create() {
      div = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true, style: true });
      children(div).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", div_class_value = /*$theme*/
      ctx[1].nowIndicator);
      set_style(
        div,
        "top",
        /*top*/
        ctx[0] + "px"
      );
      add_location(div, file4, 17, 0, 424);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*$theme*/
      2 && div_class_value !== (div_class_value = /*$theme*/
      ctx2[1].nowIndicator)) {
        attr_dev(div, "class", div_class_value);
      }
      if (dirty & /*top*/
      1) {
        set_style(
          div,
          "top",
          /*top*/
          ctx2[0] + "px"
        );
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment4.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance4($$self, $$props, $$invalidate) {
  let $slotHeight;
  let $_slotTimeLimits;
  let $slotDuration;
  let $_today;
  let $_now;
  let $theme;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("NowIndicator", slots, []);
  let { slotDuration, slotHeight, theme, _now, _today, _slotTimeLimits } = getContext("state");
  validate_store(slotDuration, "slotDuration");
  component_subscribe($$self, slotDuration, (value) => $$invalidate(11, $slotDuration = value));
  validate_store(slotHeight, "slotHeight");
  component_subscribe($$self, slotHeight, (value) => $$invalidate(9, $slotHeight = value));
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(1, $theme = value));
  validate_store(_now, "_now");
  component_subscribe($$self, _now, (value) => $$invalidate(13, $_now = value));
  validate_store(_today, "_today");
  component_subscribe($$self, _today, (value) => $$invalidate(12, $_today = value));
  validate_store(_slotTimeLimits, "_slotTimeLimits");
  component_subscribe($$self, _slotTimeLimits, (value) => $$invalidate(10, $_slotTimeLimits = value));
  let start;
  let top = 0;
  const writable_props = [];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<NowIndicator> was created with unknown prop '${key}'`);
  });
  $$self.$capture_state = () => ({
    getContext,
    slotDuration,
    slotHeight,
    theme,
    _now,
    _today,
    _slotTimeLimits,
    start,
    top,
    $slotHeight,
    $_slotTimeLimits,
    $slotDuration,
    $_today,
    $_now,
    $theme
  });
  $$self.$inject_state = ($$props2) => {
    if ("slotDuration" in $$props2)
      $$invalidate(2, slotDuration = $$props2.slotDuration);
    if ("slotHeight" in $$props2)
      $$invalidate(3, slotHeight = $$props2.slotHeight);
    if ("theme" in $$props2)
      $$invalidate(4, theme = $$props2.theme);
    if ("_now" in $$props2)
      $$invalidate(5, _now = $$props2._now);
    if ("_today" in $$props2)
      $$invalidate(6, _today = $$props2._today);
    if ("_slotTimeLimits" in $$props2)
      $$invalidate(7, _slotTimeLimits = $$props2._slotTimeLimits);
    if ("start" in $$props2)
      $$invalidate(8, start = $$props2.start);
    if ("top" in $$props2)
      $$invalidate(0, top = $$props2.top);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$_now, $_today*/
    12288) {
      $:
        $$invalidate(8, start = ($_now - $_today) / 1e3 / 60);
    }
    if ($$self.$$.dirty & /*$slotDuration, $_slotTimeLimits, start, $slotHeight*/
    3840) {
      $: {
        let step = $slotDuration.seconds / 60;
        let offset = $_slotTimeLimits.min.seconds / 60;
        $$invalidate(0, top = (start - offset) / step * $slotHeight);
      }
    }
  };
  return [
    top,
    $theme,
    slotDuration,
    slotHeight,
    theme,
    _now,
    _today,
    _slotTimeLimits,
    start,
    $slotHeight,
    $_slotTimeLimits,
    $slotDuration,
    $_today,
    $_now
  ];
}
var NowIndicator = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance4, create_fragment4, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "NowIndicator",
      options,
      id: create_fragment4.name
    });
  }
};
var NowIndicator_default = NowIndicator;

// node_modules/@event-calendar/time-grid/src/Day.svelte
var file5 = "node_modules/@event-calendar/time-grid/src/Day.svelte";
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[37] = list[i];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[37] = list[i];
  return child_ctx;
}
function create_each_block_1(key_1, ctx) {
  let first;
  let event;
  let current;
  event = new Event_default({
    props: {
      date: (
        /*date*/
        ctx[0]
      ),
      chunk: (
        /*chunk*/
        ctx[37]
      )
    },
    $$inline: true
  });
  const block = {
    key: key_1,
    first: null,
    c: function create() {
      first = empty();
      create_component(event.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      first = empty();
      claim_component(event.$$.fragment, nodes);
      this.h();
    },
    h: function hydrate() {
      this.first = first;
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, first, anchor);
      mount_component(event, target, anchor);
      current = true;
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      const event_changes = {};
      if (dirty[0] & /*date*/
      1)
        event_changes.date = /*date*/
        ctx[0];
      if (dirty[0] & /*bgChunks*/
      8)
        event_changes.chunk = /*chunk*/
        ctx[37];
      event.$set(event_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(event.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(event.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(first);
      }
      destroy_component(event, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block_1.name,
    type: "each",
    source: "(90:8) {#each bgChunks as chunk (chunk.event)}",
    ctx
  });
  return block;
}
function create_if_block_2(ctx) {
  let event;
  let current;
  event = new Event_default({
    props: {
      date: (
        /*date*/
        ctx[0]
      ),
      chunk: (
        /*iChunks*/
        ctx[4][1]
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(event.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(event.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(event, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const event_changes = {};
      if (dirty[0] & /*date*/
      1)
        event_changes.date = /*date*/
        ctx2[0];
      if (dirty[0] & /*iChunks*/
      16)
        event_changes.chunk = /*iChunks*/
        ctx2[4][1];
      event.$set(event_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(event.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(event.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(event, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(96:8) {#if iChunks[1]}",
    ctx
  });
  return block;
}
function create_each_block3(key_1, ctx) {
  let first;
  let event;
  let current;
  event = new Event_default({
    props: {
      date: (
        /*date*/
        ctx[0]
      ),
      chunk: (
        /*chunk*/
        ctx[37]
      )
    },
    $$inline: true
  });
  const block = {
    key: key_1,
    first: null,
    c: function create() {
      first = empty();
      create_component(event.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      first = empty();
      claim_component(event.$$.fragment, nodes);
      this.h();
    },
    h: function hydrate() {
      this.first = first;
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, first, anchor);
      mount_component(event, target, anchor);
      current = true;
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      const event_changes = {};
      if (dirty[0] & /*date*/
      1)
        event_changes.date = /*date*/
        ctx[0];
      if (dirty[0] & /*chunks*/
      4)
        event_changes.chunk = /*chunk*/
        ctx[37];
      event.$set(event_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(event.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(event.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(first);
      }
      destroy_component(event, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block3.name,
    type: "each",
    source: "(99:8) {#each chunks as chunk (chunk.event)}",
    ctx
  });
  return block;
}
function create_if_block_1(ctx) {
  let event;
  let current;
  event = new Event_default({
    props: {
      date: (
        /*date*/
        ctx[0]
      ),
      chunk: (
        /*iChunks*/
        ctx[4][0]
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(event.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(event.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(event, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const event_changes = {};
      if (dirty[0] & /*date*/
      1)
        event_changes.date = /*date*/
        ctx2[0];
      if (dirty[0] & /*iChunks*/
      16)
        event_changes.chunk = /*iChunks*/
        ctx2[4][0];
      event.$set(event_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(event.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(event.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(event, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(103:8) {#if iChunks[0] && !iChunks[0].event.allDay}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let nowindicator;
  let current;
  nowindicator = new NowIndicator_default({ $$inline: true });
  const block = {
    c: function create() {
      create_component(nowindicator.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(nowindicator.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(nowindicator, target, anchor);
      current = true;
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(nowindicator.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(nowindicator.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(nowindicator, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(109:8) {#if $nowIndicator && isToday}",
    ctx
  });
  return block;
}
function create_fragment5(ctx) {
  let div3;
  let div0;
  let each_blocks_1 = [];
  let each0_lookup = /* @__PURE__ */ new Map();
  let div0_class_value;
  let t0;
  let div1;
  let t1;
  let each_blocks = [];
  let each1_lookup = /* @__PURE__ */ new Map();
  let t2;
  let div1_class_value;
  let t3;
  let div2;
  let div2_class_value;
  let div3_class_value;
  let current;
  let mounted;
  let dispose;
  let each_value_1 = ensure_array_like_dev(
    /*bgChunks*/
    ctx[3]
  );
  const get_key = (ctx2) => (
    /*chunk*/
    ctx2[37].event
  );
  validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);
  for (let i = 0; i < each_value_1.length; i += 1) {
    let child_ctx = get_each_context_1(ctx, each_value_1, i);
    let key = get_key(child_ctx);
    each0_lookup.set(key, each_blocks_1[i] = create_each_block_1(key, child_ctx));
  }
  let if_block0 = (
    /*iChunks*/
    ctx[4][1] && create_if_block_2(ctx)
  );
  let each_value = ensure_array_like_dev(
    /*chunks*/
    ctx[2]
  );
  const get_key_1 = (ctx2) => (
    /*chunk*/
    ctx2[37].event
  );
  validate_each_keys(ctx, each_value, get_each_context3, get_key_1);
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context3(ctx, each_value, i);
    let key = get_key_1(child_ctx);
    each1_lookup.set(key, each_blocks[i] = create_each_block3(key, child_ctx));
  }
  let if_block1 = (
    /*iChunks*/
    ctx[4][0] && !/*iChunks*/
    ctx[4][0].event.allDay && create_if_block_1(ctx)
  );
  let if_block2 = (
    /*$nowIndicator*/
    ctx[9] && /*isToday*/
    ctx[5] && create_if_block(ctx)
  );
  const block = {
    c: function create() {
      div3 = element("div");
      div0 = element("div");
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t0 = space();
      div1 = element("div");
      if (if_block0)
        if_block0.c();
      t1 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t2 = space();
      if (if_block1)
        if_block1.c();
      t3 = space();
      div2 = element("div");
      if (if_block2)
        if_block2.c();
      this.h();
    },
    l: function claim(nodes) {
      div3 = claim_element(nodes, "DIV", { class: true, role: true });
      var div3_nodes = children(div3);
      div0 = claim_element(div3_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].l(div0_nodes);
      }
      div0_nodes.forEach(detach_dev);
      t0 = claim_space(div3_nodes);
      div1 = claim_element(div3_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      if (if_block0)
        if_block0.l(div1_nodes);
      t1 = claim_space(div1_nodes);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(div1_nodes);
      }
      t2 = claim_space(div1_nodes);
      if (if_block1)
        if_block1.l(div1_nodes);
      div1_nodes.forEach(detach_dev);
      t3 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      if (if_block2)
        if_block2.l(div2_nodes);
      div2_nodes.forEach(detach_dev);
      div3_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      var _a;
      attr_dev(div0, "class", div0_class_value = /*$theme*/
      ctx[7].bgEvents);
      add_location(div0, file5, 88, 4, 2654);
      attr_dev(div1, "class", div1_class_value = /*$theme*/
      ctx[7].events);
      add_location(div1, file5, 93, 4, 2801);
      attr_dev(div2, "class", div2_class_value = /*$theme*/
      ctx[7].extra);
      add_location(div2, file5, 106, 4, 3208);
      attr_dev(div3, "class", div3_class_value = /*$theme*/
      ctx[7].day + " " + /*$theme*/
      ((_a = ctx[7].weekdays) == null ? void 0 : _a[
        /*date*/
        ctx[0].getUTCDay()
      ]) + /*isToday*/
      (ctx[5] ? " " + /*$theme*/
      ctx[7].today : "") + /*highlight*/
      (ctx[6] ? " " + /*$theme*/
      ctx[7].highlight : ""));
      attr_dev(div3, "role", "cell");
      add_location(div3, file5, 81, 0, 2368);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div3, anchor);
      append_hydration_dev(div3, div0);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        if (each_blocks_1[i]) {
          each_blocks_1[i].m(div0, null);
        }
      }
      append_hydration_dev(div3, t0);
      append_hydration_dev(div3, div1);
      if (if_block0)
        if_block0.m(div1, null);
      append_hydration_dev(div1, t1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div1, null);
        }
      }
      append_hydration_dev(div1, t2);
      if (if_block1)
        if_block1.m(div1, null);
      append_hydration_dev(div3, t3);
      append_hydration_dev(div3, div2);
      if (if_block2)
        if_block2.m(div2, null);
      ctx[34](div3);
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(
            div3,
            "pointerleave",
            function() {
              var _a, _b;
              if (is_function(
                /*$_interaction*/
                (_a = ctx[8].pointer) == null ? void 0 : _a.leave
              ))
                (_b = ctx[8].pointer) == null ? void 0 : _b.leave.apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div3,
            "pointerdown",
            function() {
              var _a, _b;
              if (is_function(
                /*$_interaction*/
                (_a = ctx[8].action) == null ? void 0 : _a.select
              ))
                (_b = ctx[8].action) == null ? void 0 : _b.select.apply(this, arguments);
            },
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      var _a;
      ctx = new_ctx;
      if (dirty[0] & /*date, bgChunks*/
      9) {
        each_value_1 = ensure_array_like_dev(
          /*bgChunks*/
          ctx[3]
        );
        group_outros();
        validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);
        each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_1, each0_lookup, div0, outro_and_destroy_block, create_each_block_1, null, get_each_context_1);
        check_outros();
      }
      if (!current || dirty[0] & /*$theme*/
      128 && div0_class_value !== (div0_class_value = /*$theme*/
      ctx[7].bgEvents)) {
        attr_dev(div0, "class", div0_class_value);
      }
      if (
        /*iChunks*/
        ctx[4][1]
      ) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
          if (dirty[0] & /*iChunks*/
          16) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_2(ctx);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div1, t1);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (dirty[0] & /*date, chunks*/
      5) {
        each_value = ensure_array_like_dev(
          /*chunks*/
          ctx[2]
        );
        group_outros();
        validate_each_keys(ctx, each_value, get_each_context3, get_key_1);
        each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, each_value, each1_lookup, div1, outro_and_destroy_block, create_each_block3, t2, get_each_context3);
        check_outros();
      }
      if (
        /*iChunks*/
        ctx[4][0] && !/*iChunks*/
        ctx[4][0].event.allDay
      ) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
          if (dirty[0] & /*iChunks*/
          16) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_1(ctx);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div1, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*$theme*/
      128 && div1_class_value !== (div1_class_value = /*$theme*/
      ctx[7].events)) {
        attr_dev(div1, "class", div1_class_value);
      }
      if (
        /*$nowIndicator*/
        ctx[9] && /*isToday*/
        ctx[5]
      ) {
        if (if_block2) {
          if (dirty[0] & /*$nowIndicator, isToday*/
          544) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block(ctx);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div2, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*$theme*/
      128 && div2_class_value !== (div2_class_value = /*$theme*/
      ctx[7].extra)) {
        attr_dev(div2, "class", div2_class_value);
      }
      if (!current || dirty[0] & /*$theme, date, isToday, highlight*/
      225 && div3_class_value !== (div3_class_value = /*$theme*/
      ctx[7].day + " " + /*$theme*/
      ((_a = ctx[7].weekdays) == null ? void 0 : _a[
        /*date*/
        ctx[0].getUTCDay()
      ]) + /*isToday*/
      (ctx[5] ? " " + /*$theme*/
      ctx[7].today : "") + /*highlight*/
      (ctx[6] ? " " + /*$theme*/
      ctx[7].highlight : ""))) {
        attr_dev(div3, "class", div3_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks_1[i]);
      }
      transition_in(if_block0);
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(if_block1);
      transition_in(if_block2);
      current = true;
    },
    o: function outro(local) {
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        transition_out(each_blocks_1[i]);
      }
      transition_out(if_block0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(if_block1);
      transition_out(if_block2);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div3);
      }
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].d();
      }
      if (if_block0)
        if_block0.d();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      ctx[34](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment5.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance5($$self, $$props, $$invalidate) {
  let $slotHeight;
  let $slotDuration;
  let $_slotTimeLimits;
  let $highlightedDates;
  let $_today;
  let $_iEvents;
  let $_events;
  let $resources;
  let $filterEventsWithResources;
  let $theme;
  let $_interaction;
  let $nowIndicator;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Day", slots, []);
  let { date } = $$props;
  let { resource = void 0 } = $$props;
  let { _events, _iEvents, highlightedDates, nowIndicator, slotDuration, slotHeight, filterEventsWithResources, theme, resources, _interaction, _today, _slotTimeLimits } = getContext("state");
  validate_store(_events, "_events");
  component_subscribe($$self, _events, (value) => $$invalidate(31, $_events = value));
  validate_store(_iEvents, "_iEvents");
  component_subscribe($$self, _iEvents, (value) => $$invalidate(30, $_iEvents = value));
  validate_store(highlightedDates, "highlightedDates");
  component_subscribe($$self, highlightedDates, (value) => $$invalidate(28, $highlightedDates = value));
  validate_store(nowIndicator, "nowIndicator");
  component_subscribe($$self, nowIndicator, (value) => $$invalidate(9, $nowIndicator = value));
  validate_store(slotDuration, "slotDuration");
  component_subscribe($$self, slotDuration, (value) => $$invalidate(26, $slotDuration = value));
  validate_store(slotHeight, "slotHeight");
  component_subscribe($$self, slotHeight, (value) => $$invalidate(35, $slotHeight = value));
  validate_store(filterEventsWithResources, "filterEventsWithResources");
  component_subscribe($$self, filterEventsWithResources, (value) => $$invalidate(33, $filterEventsWithResources = value));
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(7, $theme = value));
  validate_store(resources, "resources");
  component_subscribe($$self, resources, (value) => $$invalidate(32, $resources = value));
  validate_store(_interaction, "_interaction");
  component_subscribe($$self, _interaction, (value) => $$invalidate(8, $_interaction = value));
  validate_store(_today, "_today");
  component_subscribe($$self, _today, (value) => $$invalidate(29, $_today = value));
  validate_store(_slotTimeLimits, "_slotTimeLimits");
  component_subscribe($$self, _slotTimeLimits, (value) => $$invalidate(27, $_slotTimeLimits = value));
  let el;
  let chunks, bgChunks, iChunks = [];
  let isToday, highlight;
  let resourceFilter;
  let start, end;
  function dateFromPoint(x, y) {
    y = floor(y) - floor(rect(el).top);
    return {
      allDay: false,
      date: addDuration(addDuration(cloneDate(date), $_slotTimeLimits.min), $slotDuration, floor(y / $slotHeight)),
      resource,
      dayEl: el
    };
  }
  $$self.$$.on_mount.push(function() {
    if (date === void 0 && !("date" in $$props || $$self.$$.bound[$$self.$$.props["date"]])) {
      console.warn("<Day> was created without expected prop 'date'");
    }
  });
  const writable_props = ["date", "resource"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Day> was created with unknown prop '${key}'`);
  });
  function div3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate(1, el);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("date" in $$props2)
      $$invalidate(0, date = $$props2.date);
    if ("resource" in $$props2)
      $$invalidate(22, resource = $$props2.resource);
  };
  $$self.$capture_state = () => ({
    getContext,
    cloneDate,
    addDuration,
    datesEqual,
    createEventChunk,
    eventIntersects,
    floor,
    rect,
    setPayload,
    bgEvent,
    handleZeroDurationChunk,
    groupEventChunks,
    Event: Event_default,
    NowIndicator: NowIndicator_default,
    date,
    resource,
    _events,
    _iEvents,
    highlightedDates,
    nowIndicator,
    slotDuration,
    slotHeight,
    filterEventsWithResources,
    theme,
    resources,
    _interaction,
    _today,
    _slotTimeLimits,
    el,
    chunks,
    bgChunks,
    iChunks,
    isToday,
    highlight,
    resourceFilter,
    start,
    end,
    dateFromPoint,
    $slotHeight,
    $slotDuration,
    $_slotTimeLimits,
    $highlightedDates,
    $_today,
    $_iEvents,
    $_events,
    $resources,
    $filterEventsWithResources,
    $theme,
    $_interaction,
    $nowIndicator
  });
  $$self.$inject_state = ($$props2) => {
    if ("date" in $$props2)
      $$invalidate(0, date = $$props2.date);
    if ("resource" in $$props2)
      $$invalidate(22, resource = $$props2.resource);
    if ("_events" in $$props2)
      $$invalidate(10, _events = $$props2._events);
    if ("_iEvents" in $$props2)
      $$invalidate(11, _iEvents = $$props2._iEvents);
    if ("highlightedDates" in $$props2)
      $$invalidate(12, highlightedDates = $$props2.highlightedDates);
    if ("nowIndicator" in $$props2)
      $$invalidate(13, nowIndicator = $$props2.nowIndicator);
    if ("slotDuration" in $$props2)
      $$invalidate(14, slotDuration = $$props2.slotDuration);
    if ("slotHeight" in $$props2)
      $$invalidate(15, slotHeight = $$props2.slotHeight);
    if ("filterEventsWithResources" in $$props2)
      $$invalidate(16, filterEventsWithResources = $$props2.filterEventsWithResources);
    if ("theme" in $$props2)
      $$invalidate(17, theme = $$props2.theme);
    if ("resources" in $$props2)
      $$invalidate(18, resources = $$props2.resources);
    if ("_interaction" in $$props2)
      $$invalidate(19, _interaction = $$props2._interaction);
    if ("_today" in $$props2)
      $$invalidate(20, _today = $$props2._today);
    if ("_slotTimeLimits" in $$props2)
      $$invalidate(21, _slotTimeLimits = $$props2._slotTimeLimits);
    if ("el" in $$props2)
      $$invalidate(1, el = $$props2.el);
    if ("chunks" in $$props2)
      $$invalidate(2, chunks = $$props2.chunks);
    if ("bgChunks" in $$props2)
      $$invalidate(3, bgChunks = $$props2.bgChunks);
    if ("iChunks" in $$props2)
      $$invalidate(4, iChunks = $$props2.iChunks);
    if ("isToday" in $$props2)
      $$invalidate(5, isToday = $$props2.isToday);
    if ("highlight" in $$props2)
      $$invalidate(6, highlight = $$props2.highlight);
    if ("resourceFilter" in $$props2)
      $$invalidate(23, resourceFilter = $$props2.resourceFilter);
    if ("start" in $$props2)
      $$invalidate(24, start = $$props2.start);
    if ("end" in $$props2)
      $$invalidate(25, end = $$props2.end);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*date, $_slotTimeLimits*/
    134217729) {
      $: {
        $$invalidate(24, start = addDuration(cloneDate(date), $_slotTimeLimits.min));
        $$invalidate(25, end = addDuration(cloneDate(date), $_slotTimeLimits.max));
      }
    }
    if ($$self.$$.dirty[0] & /*resource*/
    4194304 | $$self.$$.dirty[1] & /*$filterEventsWithResources, $resources*/
    6) {
      $:
        $$invalidate(23, resourceFilter = resource ?? ($filterEventsWithResources ? $resources : void 0));
    }
    if ($$self.$$.dirty[0] & /*start, end, resourceFilter, $slotDuration, bgChunks, chunks*/
    125829132 | $$self.$$.dirty[1] & /*$_events*/
    1) {
      $: {
        $$invalidate(2, chunks = []);
        $$invalidate(3, bgChunks = []);
        for (let event of $_events) {
          if ((!event.allDay || bgEvent(event.display)) && eventIntersects(event, start, end, resourceFilter)) {
            let chunk = createEventChunk(event, start, end);
            handleZeroDurationChunk(chunk, $slotDuration);
            switch (event.display) {
              case "background":
                bgChunks.push(chunk);
                break;
              default:
                chunks.push(chunk);
            }
          }
        }
        groupEventChunks(chunks);
      }
    }
    if ($$self.$$.dirty[0] & /*$_iEvents, start, end, resource*/
    1128267776) {
      $:
        $$invalidate(4, iChunks = $_iEvents.map((event) => event && eventIntersects(event, start, end, resource) ? createEventChunk(event, start, end) : null));
    }
    if ($$self.$$.dirty[0] & /*date, $_today*/
    536870913) {
      $:
        $$invalidate(5, isToday = datesEqual(date, $_today));
    }
    if ($$self.$$.dirty[0] & /*$highlightedDates, date*/
    268435457) {
      $:
        $$invalidate(6, highlight = $highlightedDates.some((d) => datesEqual(d, date)));
    }
    if ($$self.$$.dirty[0] & /*el*/
    2) {
      $:
        if (el) {
          setPayload(el, dateFromPoint);
        }
    }
  };
  return [
    date,
    el,
    chunks,
    bgChunks,
    iChunks,
    isToday,
    highlight,
    $theme,
    $_interaction,
    $nowIndicator,
    _events,
    _iEvents,
    highlightedDates,
    nowIndicator,
    slotDuration,
    slotHeight,
    filterEventsWithResources,
    theme,
    resources,
    _interaction,
    _today,
    _slotTimeLimits,
    resource,
    resourceFilter,
    start,
    end,
    $slotDuration,
    $_slotTimeLimits,
    $highlightedDates,
    $_today,
    $_iEvents,
    $_events,
    $resources,
    $filterEventsWithResources,
    div3_binding
  ];
}
var Day = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance5, create_fragment5, safe_not_equal, { date: 0, resource: 22 }, null, [-1, -1]);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Day",
      options,
      id: create_fragment5.name
    });
  }
  get date() {
    throw new Error("<Day>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set date(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get resource() {
    throw new Error("<Day>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set resource(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Day_default = Day;

// node_modules/@event-calendar/time-grid/src/all-day/Event.svelte
var file6 = "node_modules/@event-calendar/time-grid/src/all-day/Event.svelte";
function create_fragment6(ctx) {
  let article;
  let switch_instance0;
  let t0;
  let div;
  let div_class_value;
  let setContent_action;
  let t1;
  let switch_instance1;
  let article_role_value;
  let article_tabindex_value;
  let current;
  let mounted;
  let dispose;
  var switch_value = (
    /*$_interaction*/
    ctx[10].resizer
  );
  function switch_props(ctx2, dirty) {
    return {
      props: { start: true, event: (
        /*event*/
        ctx2[0]
      ) },
      $$inline: true
    };
  }
  if (switch_value) {
    switch_instance0 = construct_svelte_component_dev(switch_value, switch_props(ctx));
    switch_instance0.$on("pointerdown", function() {
      if (is_function(
        /*createDragHandler*/
        ctx[29](
          /*$_interaction*/
          ctx[10],
          ["x", "start"]
        )
      ))
        ctx[29](
          /*$_interaction*/
          ctx[10],
          ["x", "start"]
        ).apply(this, arguments);
    });
  }
  var switch_value_1 = (
    /*$_interaction*/
    ctx[10].resizer
  );
  function switch_props_1(ctx2, dirty) {
    return {
      props: { event: (
        /*event*/
        ctx2[0]
      ) },
      $$inline: true
    };
  }
  if (switch_value_1) {
    switch_instance1 = construct_svelte_component_dev(switch_value_1, switch_props_1(ctx));
    switch_instance1.$on("pointerdown", function() {
      if (is_function(
        /*createDragHandler*/
        ctx[29](
          /*$_interaction*/
          ctx[10],
          ["x", "end"]
        )
      ))
        ctx[29](
          /*$_interaction*/
          ctx[10],
          ["x", "end"]
        ).apply(this, arguments);
    });
  }
  const block = {
    c: function create() {
      article = element("article");
      if (switch_instance0)
        create_component(switch_instance0.$$.fragment);
      t0 = space();
      div = element("div");
      t1 = space();
      if (switch_instance1)
        create_component(switch_instance1.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      article = claim_element(nodes, "ARTICLE", {
        class: true,
        style: true,
        role: true,
        tabindex: true
      });
      var article_nodes = children(article);
      if (switch_instance0)
        claim_component(switch_instance0.$$.fragment, article_nodes);
      t0 = claim_space(article_nodes);
      div = claim_element(article_nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      t1 = claim_space(article_nodes);
      if (switch_instance1)
        claim_component(switch_instance1.$$.fragment, article_nodes);
      article_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", div_class_value = /*$theme*/
      ctx[2].eventBody);
      add_location(div, file6, 128, 4, 4018);
      attr_dev(
        article,
        "class",
        /*classes*/
        ctx[4]
      );
      attr_dev(
        article,
        "style",
        /*style*/
        ctx[5]
      );
      attr_dev(article, "role", article_role_value = /*onclick*/
      ctx[7] ? "button" : void 0);
      attr_dev(article, "tabindex", article_tabindex_value = /*onclick*/
      ctx[7] ? 0 : void 0);
      add_location(article, file6, 110, 0, 3425);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, article, anchor);
      if (switch_instance0)
        mount_component(switch_instance0, article, null);
      append_hydration_dev(article, t0);
      append_hydration_dev(article, div);
      append_hydration_dev(article, t1);
      if (switch_instance1)
        mount_component(switch_instance1, article, null);
      ctx[45](article);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(setContent_action = setContent.call(
            null,
            div,
            /*content*/
            ctx[6]
          )),
          listen_dev(
            article,
            "click",
            function() {
              if (is_function(
                /*onclick*/
                ctx[7]
              ))
                ctx[7].apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            article,
            "keydown",
            function() {
              if (is_function(
                /*onclick*/
                ctx[7] && keyEnter(
                  /*onclick*/
                  ctx[7]
                )
              ))
                /*onclick*/
                (ctx[7] && keyEnter(
                  /*onclick*/
                  ctx[7]
                )).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            article,
            "mouseenter",
            function() {
              if (is_function(
                /*createHandler*/
                ctx[28](
                  /*$eventMouseEnter*/
                  ctx[8],
                  /*display*/
                  ctx[1]
                )
              ))
                ctx[28](
                  /*$eventMouseEnter*/
                  ctx[8],
                  /*display*/
                  ctx[1]
                ).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            article,
            "mouseleave",
            function() {
              if (is_function(
                /*createHandler*/
                ctx[28](
                  /*$eventMouseLeave*/
                  ctx[9],
                  /*display*/
                  ctx[1]
                )
              ))
                ctx[28](
                  /*$eventMouseLeave*/
                  ctx[9],
                  /*display*/
                  ctx[1]
                ).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            article,
            "pointerdown",
            function() {
              if (is_function(!helperEvent(
                /*display*/
                ctx[1]
              ) && /*createDragHandler*/
              ctx[29](
                /*$_interaction*/
                ctx[10]
              )))
                (!helperEvent(
                  /*display*/
                  ctx[1]
                ) && /*createDragHandler*/
                ctx[29](
                  /*$_interaction*/
                  ctx[10]
                )).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*$_interaction*/
      1024 && switch_value !== (switch_value = /*$_interaction*/
      ctx[10].resizer)) {
        if (switch_instance0) {
          group_outros();
          const old_component = switch_instance0;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance0 = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
          switch_instance0.$on("pointerdown", function() {
            if (is_function(
              /*createDragHandler*/
              ctx[29](
                /*$_interaction*/
                ctx[10],
                ["x", "start"]
              )
            ))
              ctx[29](
                /*$_interaction*/
                ctx[10],
                ["x", "start"]
              ).apply(this, arguments);
          });
          create_component(switch_instance0.$$.fragment);
          transition_in(switch_instance0.$$.fragment, 1);
          mount_component(switch_instance0, article, t0);
        } else {
          switch_instance0 = null;
        }
      } else if (switch_value) {
        const switch_instance0_changes = {};
        if (dirty[0] & /*event*/
        1)
          switch_instance0_changes.event = /*event*/
          ctx[0];
        switch_instance0.$set(switch_instance0_changes);
      }
      if (!current || dirty[0] & /*$theme*/
      4 && div_class_value !== (div_class_value = /*$theme*/
      ctx[2].eventBody)) {
        attr_dev(div, "class", div_class_value);
      }
      if (setContent_action && is_function(setContent_action.update) && dirty[0] & /*content*/
      64)
        setContent_action.update.call(
          null,
          /*content*/
          ctx[6]
        );
      if (dirty[0] & /*$_interaction*/
      1024 && switch_value_1 !== (switch_value_1 = /*$_interaction*/
      ctx[10].resizer)) {
        if (switch_instance1) {
          group_outros();
          const old_component = switch_instance1;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value_1) {
          switch_instance1 = construct_svelte_component_dev(switch_value_1, switch_props_1(ctx, dirty));
          switch_instance1.$on("pointerdown", function() {
            if (is_function(
              /*createDragHandler*/
              ctx[29](
                /*$_interaction*/
                ctx[10],
                ["x", "end"]
              )
            ))
              ctx[29](
                /*$_interaction*/
                ctx[10],
                ["x", "end"]
              ).apply(this, arguments);
          });
          create_component(switch_instance1.$$.fragment);
          transition_in(switch_instance1.$$.fragment, 1);
          mount_component(switch_instance1, article, null);
        } else {
          switch_instance1 = null;
        }
      } else if (switch_value_1) {
        const switch_instance1_changes = {};
        if (dirty[0] & /*event*/
        1)
          switch_instance1_changes.event = /*event*/
          ctx[0];
        switch_instance1.$set(switch_instance1_changes);
      }
      if (!current || dirty[0] & /*classes*/
      16) {
        attr_dev(
          article,
          "class",
          /*classes*/
          ctx[4]
        );
      }
      if (!current || dirty[0] & /*style*/
      32) {
        attr_dev(
          article,
          "style",
          /*style*/
          ctx[5]
        );
      }
      if (!current || dirty[0] & /*onclick*/
      128 && article_role_value !== (article_role_value = /*onclick*/
      ctx[7] ? "button" : void 0)) {
        attr_dev(article, "role", article_role_value);
      }
      if (!current || dirty[0] & /*onclick*/
      128 && article_tabindex_value !== (article_tabindex_value = /*onclick*/
      ctx[7] ? 0 : void 0)) {
        attr_dev(article, "tabindex", article_tabindex_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      if (switch_instance0)
        transition_in(switch_instance0.$$.fragment, local);
      if (switch_instance1)
        transition_in(switch_instance1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance0)
        transition_out(switch_instance0.$$.fragment, local);
      if (switch_instance1)
        transition_out(switch_instance1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(article);
      }
      if (switch_instance0)
        destroy_component(switch_instance0);
      if (switch_instance1)
        destroy_component(switch_instance1);
      ctx[45](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment6.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance6($$self, $$props, $$invalidate) {
  let $eventClick;
  let $_view;
  let $eventAllUpdated;
  let $eventDidMount;
  let $_intlEventTime;
  let $theme;
  let $eventContent;
  let $displayEventEnd;
  let $eventClassNames;
  let $_iClasses;
  let $eventTextColor;
  let $resources;
  let $eventColor;
  let $eventBackgroundColor;
  let $eventMouseEnter;
  let $eventMouseLeave;
  let $_interaction;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Event", slots, []);
  let { chunk } = $$props;
  let { longChunks = {} } = $$props;
  let { displayEventEnd, eventAllUpdated, eventBackgroundColor, eventTextColor, eventClick, eventColor, eventContent, eventClassNames, eventDidMount, eventMouseEnter, eventMouseLeave, resources, theme, _view, _intlEventTime, _interaction, _iClasses, _tasks } = getContext("state");
  validate_store(displayEventEnd, "displayEventEnd");
  component_subscribe($$self, displayEventEnd, (value) => $$invalidate(38, $displayEventEnd = value));
  validate_store(eventAllUpdated, "eventAllUpdated");
  component_subscribe($$self, eventAllUpdated, (value) => $$invalidate(47, $eventAllUpdated = value));
  validate_store(eventBackgroundColor, "eventBackgroundColor");
  component_subscribe($$self, eventBackgroundColor, (value) => $$invalidate(44, $eventBackgroundColor = value));
  validate_store(eventTextColor, "eventTextColor");
  component_subscribe($$self, eventTextColor, (value) => $$invalidate(41, $eventTextColor = value));
  validate_store(eventClick, "eventClick");
  component_subscribe($$self, eventClick, (value) => $$invalidate(34, $eventClick = value));
  validate_store(eventColor, "eventColor");
  component_subscribe($$self, eventColor, (value) => $$invalidate(43, $eventColor = value));
  validate_store(eventContent, "eventContent");
  component_subscribe($$self, eventContent, (value) => $$invalidate(37, $eventContent = value));
  validate_store(eventClassNames, "eventClassNames");
  component_subscribe($$self, eventClassNames, (value) => $$invalidate(39, $eventClassNames = value));
  validate_store(eventDidMount, "eventDidMount");
  component_subscribe($$self, eventDidMount, (value) => $$invalidate(48, $eventDidMount = value));
  validate_store(eventMouseEnter, "eventMouseEnter");
  component_subscribe($$self, eventMouseEnter, (value) => $$invalidate(8, $eventMouseEnter = value));
  validate_store(eventMouseLeave, "eventMouseLeave");
  component_subscribe($$self, eventMouseLeave, (value) => $$invalidate(9, $eventMouseLeave = value));
  validate_store(resources, "resources");
  component_subscribe($$self, resources, (value) => $$invalidate(42, $resources = value));
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(2, $theme = value));
  validate_store(_view, "_view");
  component_subscribe($$self, _view, (value) => $$invalidate(35, $_view = value));
  validate_store(_intlEventTime, "_intlEventTime");
  component_subscribe($$self, _intlEventTime, (value) => $$invalidate(36, $_intlEventTime = value));
  validate_store(_interaction, "_interaction");
  component_subscribe($$self, _interaction, (value) => $$invalidate(10, $_interaction = value));
  validate_store(_iClasses, "_iClasses");
  component_subscribe($$self, _iClasses, (value) => $$invalidate(40, $_iClasses = value));
  let el;
  let event;
  let classes;
  let style;
  let content;
  let timeText;
  let margin = 1;
  let display;
  let onclick;
  onMount(() => {
    if (isFunction($eventDidMount)) {
      $eventDidMount({
        event: toEventWithLocalDates(event),
        timeText,
        el,
        view: toViewWithLocalDates($_view)
      });
    }
  });
  afterUpdate(() => {
    if (isFunction($eventAllUpdated) && !helperEvent(display)) {
      task(() => $eventAllUpdated({ view: toViewWithLocalDates($_view) }), "eau", _tasks);
    }
  });
  function createHandler(fn, display2) {
    return !helperEvent(display2) && isFunction(fn) ? (jsEvent) => fn({
      event: toEventWithLocalDates(event),
      el,
      jsEvent,
      view: toViewWithLocalDates($_view)
    }) : void 0;
  }
  function createDragHandler(interaction, resize) {
    return interaction.action ? (jsEvent) => interaction.action.drag(event, jsEvent, resize, null, rect(el).top - rect(ancestor(el, 1)).top) : void 0;
  }
  function reposition() {
    if (!el) {
      return;
    }
    $$invalidate(33, margin = repositionEvent(chunk, longChunks, height(el)));
  }
  $$self.$$.on_mount.push(function() {
    if (chunk === void 0 && !("chunk" in $$props || $$self.$$.bound[$$self.$$.props["chunk"]])) {
      console.warn("<Event> was created without expected prop 'chunk'");
    }
  });
  const writable_props = ["chunk", "longChunks"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Event> was created with unknown prop '${key}'`);
  });
  function article_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate(3, el);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("chunk" in $$props2)
      $$invalidate(30, chunk = $$props2.chunk);
    if ("longChunks" in $$props2)
      $$invalidate(31, longChunks = $$props2.longChunks);
  };
  $$self.$capture_state = () => ({
    afterUpdate,
    getContext,
    onMount,
    createEventClasses,
    createEventContent,
    height,
    toEventWithLocalDates,
    toViewWithLocalDates,
    setContent,
    repositionEvent,
    resourceBackgroundColor,
    resourceTextColor,
    helperEvent,
    keyEnter,
    task,
    rect,
    ancestor,
    bgEvent,
    isFunction,
    chunk,
    longChunks,
    displayEventEnd,
    eventAllUpdated,
    eventBackgroundColor,
    eventTextColor,
    eventClick,
    eventColor,
    eventContent,
    eventClassNames,
    eventDidMount,
    eventMouseEnter,
    eventMouseLeave,
    resources,
    theme,
    _view,
    _intlEventTime,
    _interaction,
    _iClasses,
    _tasks,
    el,
    event,
    classes,
    style,
    content,
    timeText,
    margin,
    display,
    onclick,
    createHandler,
    createDragHandler,
    reposition,
    $eventClick,
    $_view,
    $eventAllUpdated,
    $eventDidMount,
    $_intlEventTime,
    $theme,
    $eventContent,
    $displayEventEnd,
    $eventClassNames,
    $_iClasses,
    $eventTextColor,
    $resources,
    $eventColor,
    $eventBackgroundColor,
    $eventMouseEnter,
    $eventMouseLeave,
    $_interaction
  });
  $$self.$inject_state = ($$props2) => {
    if ("chunk" in $$props2)
      $$invalidate(30, chunk = $$props2.chunk);
    if ("longChunks" in $$props2)
      $$invalidate(31, longChunks = $$props2.longChunks);
    if ("displayEventEnd" in $$props2)
      $$invalidate(11, displayEventEnd = $$props2.displayEventEnd);
    if ("eventAllUpdated" in $$props2)
      $$invalidate(12, eventAllUpdated = $$props2.eventAllUpdated);
    if ("eventBackgroundColor" in $$props2)
      $$invalidate(13, eventBackgroundColor = $$props2.eventBackgroundColor);
    if ("eventTextColor" in $$props2)
      $$invalidate(14, eventTextColor = $$props2.eventTextColor);
    if ("eventClick" in $$props2)
      $$invalidate(15, eventClick = $$props2.eventClick);
    if ("eventColor" in $$props2)
      $$invalidate(16, eventColor = $$props2.eventColor);
    if ("eventContent" in $$props2)
      $$invalidate(17, eventContent = $$props2.eventContent);
    if ("eventClassNames" in $$props2)
      $$invalidate(18, eventClassNames = $$props2.eventClassNames);
    if ("eventDidMount" in $$props2)
      $$invalidate(19, eventDidMount = $$props2.eventDidMount);
    if ("eventMouseEnter" in $$props2)
      $$invalidate(20, eventMouseEnter = $$props2.eventMouseEnter);
    if ("eventMouseLeave" in $$props2)
      $$invalidate(21, eventMouseLeave = $$props2.eventMouseLeave);
    if ("resources" in $$props2)
      $$invalidate(22, resources = $$props2.resources);
    if ("theme" in $$props2)
      $$invalidate(23, theme = $$props2.theme);
    if ("_view" in $$props2)
      $$invalidate(24, _view = $$props2._view);
    if ("_intlEventTime" in $$props2)
      $$invalidate(25, _intlEventTime = $$props2._intlEventTime);
    if ("_interaction" in $$props2)
      $$invalidate(26, _interaction = $$props2._interaction);
    if ("_iClasses" in $$props2)
      $$invalidate(27, _iClasses = $$props2._iClasses);
    if ("_tasks" in $$props2)
      _tasks = $$props2._tasks;
    if ("el" in $$props2)
      $$invalidate(3, el = $$props2.el);
    if ("event" in $$props2)
      $$invalidate(0, event = $$props2.event);
    if ("classes" in $$props2)
      $$invalidate(4, classes = $$props2.classes);
    if ("style" in $$props2)
      $$invalidate(5, style = $$props2.style);
    if ("content" in $$props2)
      $$invalidate(6, content = $$props2.content);
    if ("timeText" in $$props2)
      timeText = $$props2.timeText;
    if ("margin" in $$props2)
      $$invalidate(33, margin = $$props2.margin);
    if ("display" in $$props2)
      $$invalidate(1, display = $$props2.display);
    if ("onclick" in $$props2)
      $$invalidate(7, onclick = $$props2.onclick);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*chunk*/
    1073741824) {
      $:
        $$invalidate(0, event = chunk.event);
    }
    if ($$self.$$.dirty[0] & /*event, display, chunk, style, $theme*/
    1073741863 | $$self.$$.dirty[1] & /*$resources, $eventBackgroundColor, $eventColor, $eventTextColor, margin, $_iClasses, $eventClassNames, $_view*/
    16148) {
      $: {
        $$invalidate(1, display = event.display);
        let bgColor = event.backgroundColor || resourceBackgroundColor(event, $resources) || $eventBackgroundColor || $eventColor;
        let txtColor = event.textColor || resourceTextColor(event, $resources) || $eventTextColor;
        if (bgEvent(display)) {
          $$invalidate(5, style = `width:calc(${chunk.days * 100}% + ${chunk.days - 1}px);`);
        } else {
          $$invalidate(5, style = `width:calc(${chunk.days * 100}% + ${(chunk.days - 1) * 7}px);margin-top:${event._margin ?? margin}px;`);
        }
        if (bgColor) {
          $$invalidate(5, style += `background-color:${bgColor};`);
        }
        if (txtColor) {
          $$invalidate(5, style += `color:${txtColor};`);
        }
        $$invalidate(5, style += event.styles.join(";"));
        $$invalidate(4, classes = [
          bgEvent(display) ? $theme.bgEvent : $theme.event,
          ...$_iClasses([], event),
          ...createEventClasses($eventClassNames, event, $_view)
        ].join(" "));
      }
    }
    if ($$self.$$.dirty[0] & /*chunk, $theme*/
    1073741828 | $$self.$$.dirty[1] & /*$displayEventEnd, $eventContent, $_intlEventTime, $_view*/
    240) {
      $:
        $$invalidate(6, [timeText, content] = createEventContent(chunk, $displayEventEnd, $eventContent, $theme, $_intlEventTime, $_view), content);
    }
    if ($$self.$$.dirty[0] & /*display*/
    2 | $$self.$$.dirty[1] & /*$eventClick*/
    8) {
      $:
        $$invalidate(7, onclick = createHandler($eventClick, display));
    }
  };
  return [
    event,
    display,
    $theme,
    el,
    classes,
    style,
    content,
    onclick,
    $eventMouseEnter,
    $eventMouseLeave,
    $_interaction,
    displayEventEnd,
    eventAllUpdated,
    eventBackgroundColor,
    eventTextColor,
    eventClick,
    eventColor,
    eventContent,
    eventClassNames,
    eventDidMount,
    eventMouseEnter,
    eventMouseLeave,
    resources,
    theme,
    _view,
    _intlEventTime,
    _interaction,
    _iClasses,
    createHandler,
    createDragHandler,
    chunk,
    longChunks,
    reposition,
    margin,
    $eventClick,
    $_view,
    $_intlEventTime,
    $eventContent,
    $displayEventEnd,
    $eventClassNames,
    $_iClasses,
    $eventTextColor,
    $resources,
    $eventColor,
    $eventBackgroundColor,
    article_binding
  ];
}
var Event2 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance6,
      create_fragment6,
      safe_not_equal,
      {
        chunk: 30,
        longChunks: 31,
        reposition: 32
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Event",
      options,
      id: create_fragment6.name
    });
  }
  get chunk() {
    throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set chunk(value) {
    throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get longChunks() {
    throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set longChunks(value) {
    throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get reposition() {
    return this.$$.ctx[32];
  }
  set reposition(value) {
    throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Event_default2 = Event2;

// node_modules/@event-calendar/time-grid/src/all-day/Day.svelte
var file7 = "node_modules/@event-calendar/time-grid/src/all-day/Day.svelte";
function get_each_context4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[23] = list[i];
  child_ctx[24] = list;
  child_ctx[25] = i;
  return child_ctx;
}
function get_each_context_12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[23] = list[i];
  return child_ctx;
}
function create_each_block_12(key_1, ctx) {
  let first;
  let event;
  let current;
  event = new Event_default2({
    props: { chunk: (
      /*chunk*/
      ctx[23]
    ) },
    $$inline: true
  });
  const block = {
    key: key_1,
    first: null,
    c: function create() {
      first = empty();
      create_component(event.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      first = empty();
      claim_component(event.$$.fragment, nodes);
      this.h();
    },
    h: function hydrate() {
      this.first = first;
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, first, anchor);
      mount_component(event, target, anchor);
      current = true;
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      const event_changes = {};
      if (dirty & /*dayBgChunks*/
      32)
        event_changes.chunk = /*chunk*/
        ctx[23];
      event.$set(event_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(event.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(event.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(first);
      }
      destroy_component(event, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block_12.name,
    type: "each",
    source: "(45:8) {#each dayBgChunks as chunk (chunk.event)}",
    ctx
  });
  return block;
}
function create_if_block2(ctx) {
  let div;
  let event;
  let div_class_value;
  let current;
  event = new Event_default2({
    props: { chunk: (
      /*iChunks*/
      ctx[2][0]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      div = element("div");
      create_component(event.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(event.$$.fragment, div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", div_class_value = /*$theme*/
      ctx[9].events + " " + /*$theme*/
      ctx[9].preview);
      add_location(div, file7, 50, 8, 1519);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      mount_component(event, div, null);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const event_changes = {};
      if (dirty & /*iChunks*/
      4)
        event_changes.chunk = /*iChunks*/
        ctx2[2][0];
      event.$set(event_changes);
      if (!current || dirty & /*$theme*/
      512 && div_class_value !== (div_class_value = /*$theme*/
      ctx2[9].events + " " + /*$theme*/
      ctx2[9].preview)) {
        attr_dev(div, "class", div_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(event.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(event.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
      destroy_component(event);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block2.name,
    type: "if",
    source: "(50:4) {#if iChunks[0] && datesEqual(iChunks[0].date, date)}",
    ctx
  });
  return block;
}
function create_each_block4(key_1, ctx) {
  let first;
  let event;
  let i = (
    /*i*/
    ctx[25]
  );
  let current;
  const assign_event = () => (
    /*event_binding*/
    ctx[21](event, i)
  );
  const unassign_event = () => (
    /*event_binding*/
    ctx[21](null, i)
  );
  let event_props = {
    chunk: (
      /*chunk*/
      ctx[23]
    ),
    longChunks: (
      /*longChunks*/
      ctx[1]
    )
  };
  event = new Event_default2({ props: event_props, $$inline: true });
  assign_event();
  const block = {
    key: key_1,
    first: null,
    c: function create() {
      first = empty();
      create_component(event.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      first = empty();
      claim_component(event.$$.fragment, nodes);
      this.h();
    },
    h: function hydrate() {
      this.first = first;
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, first, anchor);
      mount_component(event, target, anchor);
      current = true;
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (i !== /*i*/
      ctx[25]) {
        unassign_event();
        i = /*i*/
        ctx[25];
        assign_event();
      }
      const event_changes = {};
      if (dirty & /*dayChunks*/
      16)
        event_changes.chunk = /*chunk*/
        ctx[23];
      if (dirty & /*longChunks*/
      2)
        event_changes.longChunks = /*longChunks*/
        ctx[1];
      event.$set(event_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(event.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(event.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(first);
      }
      unassign_event();
      destroy_component(event, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block4.name,
    type: "each",
    source: "(56:8) {#each dayChunks as chunk, i (chunk.event)}",
    ctx
  });
  return block;
}
function create_fragment7(ctx) {
  let div2;
  let div0;
  let each_blocks_1 = [];
  let each0_lookup = /* @__PURE__ */ new Map();
  let div0_class_value;
  let t0;
  let show_if = (
    /*iChunks*/
    ctx[2][0] && datesEqual(
      /*iChunks*/
      ctx[2][0].date,
      /*date*/
      ctx[0]
    )
  );
  let t1;
  let div1;
  let each_blocks = [];
  let each1_lookup = /* @__PURE__ */ new Map();
  let div1_class_value;
  let div2_class_value;
  let current;
  let mounted;
  let dispose;
  let each_value_1 = ensure_array_like_dev(
    /*dayBgChunks*/
    ctx[5]
  );
  const get_key = (ctx2) => (
    /*chunk*/
    ctx2[23].event
  );
  validate_each_keys(ctx, each_value_1, get_each_context_12, get_key);
  for (let i = 0; i < each_value_1.length; i += 1) {
    let child_ctx = get_each_context_12(ctx, each_value_1, i);
    let key = get_key(child_ctx);
    each0_lookup.set(key, each_blocks_1[i] = create_each_block_12(key, child_ctx));
  }
  let if_block = show_if && create_if_block2(ctx);
  let each_value = ensure_array_like_dev(
    /*dayChunks*/
    ctx[4]
  );
  const get_key_1 = (ctx2) => (
    /*chunk*/
    ctx2[23].event
  );
  validate_each_keys(ctx, each_value, get_each_context4, get_key_1);
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context4(ctx, each_value, i);
    let key = get_key_1(child_ctx);
    each1_lookup.set(key, each_blocks[i] = create_each_block4(key, child_ctx));
  }
  const block = {
    c: function create() {
      div2 = element("div");
      div0 = element("div");
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t0 = space();
      if (if_block)
        if_block.c();
      t1 = space();
      div1 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      this.h();
    },
    l: function claim(nodes) {
      div2 = claim_element(nodes, "DIV", { class: true, role: true });
      var div2_nodes = children(div2);
      div0 = claim_element(div2_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].l(div0_nodes);
      }
      div0_nodes.forEach(detach_dev);
      t0 = claim_space(div2_nodes);
      if (if_block)
        if_block.l(div2_nodes);
      t1 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(div1_nodes);
      }
      div1_nodes.forEach(detach_dev);
      div2_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      var _a;
      attr_dev(div0, "class", div0_class_value = /*$theme*/
      ctx[9].bgEvents);
      add_location(div0, file7, 43, 4, 1279);
      attr_dev(div1, "class", div1_class_value = /*$theme*/
      ctx[9].events);
      add_location(div1, file7, 54, 4, 1635);
      attr_dev(div2, "class", div2_class_value = /*$theme*/
      ctx[9].day + " " + /*$theme*/
      ((_a = ctx[9].weekdays) == null ? void 0 : _a[
        /*date*/
        ctx[0].getUTCDay()
      ]) + /*isToday*/
      (ctx[6] ? " " + /*$theme*/
      ctx[9].today : "") + /*highlight*/
      (ctx[7] ? " " + /*$theme*/
      ctx[9].highlight : ""));
      attr_dev(div2, "role", "cell");
      add_location(div2, file7, 36, 0, 993);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div2, anchor);
      append_hydration_dev(div2, div0);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        if (each_blocks_1[i]) {
          each_blocks_1[i].m(div0, null);
        }
      }
      append_hydration_dev(div2, t0);
      if (if_block)
        if_block.m(div2, null);
      append_hydration_dev(div2, t1);
      append_hydration_dev(div2, div1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div1, null);
        }
      }
      ctx[22](div2);
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(
            div2,
            "pointerleave",
            function() {
              var _a, _b;
              if (is_function(
                /*$_interaction*/
                (_a = ctx[10].pointer) == null ? void 0 : _a.leave
              ))
                (_b = ctx[10].pointer) == null ? void 0 : _b.leave.apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div2,
            "pointerdown",
            function() {
              var _a, _b;
              if (is_function(
                /*$_interaction*/
                (_a = ctx[10].action) == null ? void 0 : _a.select
              ))
                (_b = ctx[10].action) == null ? void 0 : _b.select.apply(this, arguments);
            },
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, [dirty]) {
      var _a;
      ctx = new_ctx;
      if (dirty & /*dayBgChunks*/
      32) {
        each_value_1 = ensure_array_like_dev(
          /*dayBgChunks*/
          ctx[5]
        );
        group_outros();
        validate_each_keys(ctx, each_value_1, get_each_context_12, get_key);
        each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_1, each0_lookup, div0, outro_and_destroy_block, create_each_block_12, null, get_each_context_12);
        check_outros();
      }
      if (!current || dirty & /*$theme*/
      512 && div0_class_value !== (div0_class_value = /*$theme*/
      ctx[9].bgEvents)) {
        attr_dev(div0, "class", div0_class_value);
      }
      if (dirty & /*iChunks, date*/
      5)
        show_if = /*iChunks*/
        ctx[2][0] && datesEqual(
          /*iChunks*/
          ctx[2][0].date,
          /*date*/
          ctx[0]
        );
      if (show_if) {
        if (if_block) {
          if_block.p(ctx, dirty);
          if (dirty & /*iChunks, date*/
          5) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block2(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div2, t1);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (dirty & /*dayChunks, longChunks, refs*/
      274) {
        each_value = ensure_array_like_dev(
          /*dayChunks*/
          ctx[4]
        );
        group_outros();
        validate_each_keys(ctx, each_value, get_each_context4, get_key_1);
        each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, each_value, each1_lookup, div1, outro_and_destroy_block, create_each_block4, null, get_each_context4);
        check_outros();
      }
      if (!current || dirty & /*$theme*/
      512 && div1_class_value !== (div1_class_value = /*$theme*/
      ctx[9].events)) {
        attr_dev(div1, "class", div1_class_value);
      }
      if (!current || dirty & /*$theme, date, isToday, highlight*/
      705 && div2_class_value !== (div2_class_value = /*$theme*/
      ctx[9].day + " " + /*$theme*/
      ((_a = ctx[9].weekdays) == null ? void 0 : _a[
        /*date*/
        ctx[0].getUTCDay()
      ]) + /*isToday*/
      (ctx[6] ? " " + /*$theme*/
      ctx[9].today : "") + /*highlight*/
      (ctx[7] ? " " + /*$theme*/
      ctx[9].highlight : ""))) {
        attr_dev(div2, "class", div2_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks_1[i]);
      }
      transition_in(if_block);
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        transition_out(each_blocks_1[i]);
      }
      transition_out(if_block);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div2);
      }
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].d();
      }
      if (if_block)
        if_block.d();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      ctx[22](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment7.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance7($$self, $$props, $$invalidate) {
  let $highlightedDates;
  let $_today;
  let $theme;
  let $_interaction;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Day", slots, []);
  let { date } = $$props;
  let { chunks } = $$props;
  let { bgChunks } = $$props;
  let { longChunks } = $$props;
  let { iChunks = [] } = $$props;
  let { resource = void 0 } = $$props;
  let { highlightedDates, theme, _interaction, _today } = getContext("state");
  validate_store(highlightedDates, "highlightedDates");
  component_subscribe($$self, highlightedDates, (value) => $$invalidate(19, $highlightedDates = value));
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(9, $theme = value));
  validate_store(_interaction, "_interaction");
  component_subscribe($$self, _interaction, (value) => $$invalidate(10, $_interaction = value));
  validate_store(_today, "_today");
  component_subscribe($$self, _today, (value) => $$invalidate(20, $_today = value));
  let el;
  let dayChunks, dayBgChunks;
  let isToday;
  let highlight;
  let refs = [];
  function reposition() {
    runReposition(refs, dayChunks);
  }
  $$self.$$.on_mount.push(function() {
    if (date === void 0 && !("date" in $$props || $$self.$$.bound[$$self.$$.props["date"]])) {
      console.warn("<Day> was created without expected prop 'date'");
    }
    if (chunks === void 0 && !("chunks" in $$props || $$self.$$.bound[$$self.$$.props["chunks"]])) {
      console.warn("<Day> was created without expected prop 'chunks'");
    }
    if (bgChunks === void 0 && !("bgChunks" in $$props || $$self.$$.bound[$$self.$$.props["bgChunks"]])) {
      console.warn("<Day> was created without expected prop 'bgChunks'");
    }
    if (longChunks === void 0 && !("longChunks" in $$props || $$self.$$.bound[$$self.$$.props["longChunks"]])) {
      console.warn("<Day> was created without expected prop 'longChunks'");
    }
  });
  const writable_props = ["date", "chunks", "bgChunks", "longChunks", "iChunks", "resource"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Day> was created with unknown prop '${key}'`);
  });
  function event_binding($$value, i) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      refs[i] = $$value;
      $$invalidate(8, refs);
    });
  }
  function div2_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate(3, el);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("date" in $$props2)
      $$invalidate(0, date = $$props2.date);
    if ("chunks" in $$props2)
      $$invalidate(15, chunks = $$props2.chunks);
    if ("bgChunks" in $$props2)
      $$invalidate(16, bgChunks = $$props2.bgChunks);
    if ("longChunks" in $$props2)
      $$invalidate(1, longChunks = $$props2.longChunks);
    if ("iChunks" in $$props2)
      $$invalidate(2, iChunks = $$props2.iChunks);
    if ("resource" in $$props2)
      $$invalidate(17, resource = $$props2.resource);
  };
  $$self.$capture_state = () => ({
    getContext,
    datesEqual,
    runReposition,
    setPayload,
    Event: Event_default2,
    date,
    chunks,
    bgChunks,
    longChunks,
    iChunks,
    resource,
    highlightedDates,
    theme,
    _interaction,
    _today,
    el,
    dayChunks,
    dayBgChunks,
    isToday,
    highlight,
    refs,
    reposition,
    $highlightedDates,
    $_today,
    $theme,
    $_interaction
  });
  $$self.$inject_state = ($$props2) => {
    if ("date" in $$props2)
      $$invalidate(0, date = $$props2.date);
    if ("chunks" in $$props2)
      $$invalidate(15, chunks = $$props2.chunks);
    if ("bgChunks" in $$props2)
      $$invalidate(16, bgChunks = $$props2.bgChunks);
    if ("longChunks" in $$props2)
      $$invalidate(1, longChunks = $$props2.longChunks);
    if ("iChunks" in $$props2)
      $$invalidate(2, iChunks = $$props2.iChunks);
    if ("resource" in $$props2)
      $$invalidate(17, resource = $$props2.resource);
    if ("highlightedDates" in $$props2)
      $$invalidate(11, highlightedDates = $$props2.highlightedDates);
    if ("theme" in $$props2)
      $$invalidate(12, theme = $$props2.theme);
    if ("_interaction" in $$props2)
      $$invalidate(13, _interaction = $$props2._interaction);
    if ("_today" in $$props2)
      $$invalidate(14, _today = $$props2._today);
    if ("el" in $$props2)
      $$invalidate(3, el = $$props2.el);
    if ("dayChunks" in $$props2)
      $$invalidate(4, dayChunks = $$props2.dayChunks);
    if ("dayBgChunks" in $$props2)
      $$invalidate(5, dayBgChunks = $$props2.dayBgChunks);
    if ("isToday" in $$props2)
      $$invalidate(6, isToday = $$props2.isToday);
    if ("highlight" in $$props2)
      $$invalidate(7, highlight = $$props2.highlight);
    if ("refs" in $$props2)
      $$invalidate(8, refs = $$props2.refs);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*chunks, date*/
    32769) {
      $:
        $$invalidate(4, dayChunks = chunks.filter((chunk) => datesEqual(chunk.date, date)));
    }
    if ($$self.$$.dirty & /*bgChunks, date*/
    65537) {
      $:
        $$invalidate(5, dayBgChunks = bgChunks.filter((bgChunk) => datesEqual(bgChunk.date, date)));
    }
    if ($$self.$$.dirty & /*date, $_today*/
    1048577) {
      $:
        $$invalidate(6, isToday = datesEqual(date, $_today));
    }
    if ($$self.$$.dirty & /*$highlightedDates, date*/
    524289) {
      $:
        $$invalidate(7, highlight = $highlightedDates.some((d) => datesEqual(d, date)));
    }
    if ($$self.$$.dirty & /*el, date, resource*/
    131081) {
      $:
        if (el) {
          setPayload(el, () => ({ allDay: true, date, resource, dayEl: el }));
        }
    }
  };
  return [
    date,
    longChunks,
    iChunks,
    el,
    dayChunks,
    dayBgChunks,
    isToday,
    highlight,
    refs,
    $theme,
    $_interaction,
    highlightedDates,
    theme,
    _interaction,
    _today,
    chunks,
    bgChunks,
    resource,
    reposition,
    $highlightedDates,
    $_today,
    event_binding,
    div2_binding
  ];
}
var Day2 = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance7, create_fragment7, safe_not_equal, {
      date: 0,
      chunks: 15,
      bgChunks: 16,
      longChunks: 1,
      iChunks: 2,
      resource: 17,
      reposition: 18
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Day",
      options,
      id: create_fragment7.name
    });
  }
  get date() {
    throw new Error("<Day>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set date(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get chunks() {
    throw new Error("<Day>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set chunks(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get bgChunks() {
    throw new Error("<Day>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set bgChunks(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get longChunks() {
    throw new Error("<Day>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set longChunks(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get iChunks() {
    throw new Error("<Day>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set iChunks(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get resource() {
    throw new Error("<Day>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set resource(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get reposition() {
    return this.$$.ctx[18];
  }
  set reposition(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Day_default2 = Day2;

// node_modules/@event-calendar/time-grid/src/all-day/Week.svelte
function get_each_context5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[24] = list[i];
  child_ctx[25] = list;
  child_ctx[26] = i;
  return child_ctx;
}
function create_each_block5(ctx) {
  let day;
  let i = (
    /*i*/
    ctx[26]
  );
  let current;
  const assign_day = () => (
    /*day_binding*/
    ctx[21](day, i)
  );
  const unassign_day = () => (
    /*day_binding*/
    ctx[21](null, i)
  );
  let day_props = {
    date: (
      /*date*/
      ctx[24]
    ),
    chunks: (
      /*chunks*/
      ctx[2]
    ),
    bgChunks: (
      /*bgChunks*/
      ctx[3]
    ),
    longChunks: (
      /*longChunks*/
      ctx[4]
    ),
    iChunks: (
      /*iChunks*/
      ctx[5]
    ),
    resource: (
      /*resource*/
      ctx[1]
    )
  };
  day = new Day_default2({ props: day_props, $$inline: true });
  assign_day();
  const block = {
    c: function create() {
      create_component(day.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(day.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(day, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (i !== /*i*/
      ctx2[26]) {
        unassign_day();
        i = /*i*/
        ctx2[26];
        assign_day();
      }
      const day_changes = {};
      if (dirty & /*dates*/
      1)
        day_changes.date = /*date*/
        ctx2[24];
      if (dirty & /*chunks*/
      4)
        day_changes.chunks = /*chunks*/
        ctx2[2];
      if (dirty & /*bgChunks*/
      8)
        day_changes.bgChunks = /*bgChunks*/
        ctx2[3];
      if (dirty & /*longChunks*/
      16)
        day_changes.longChunks = /*longChunks*/
        ctx2[4];
      if (dirty & /*iChunks*/
      32)
        day_changes.iChunks = /*iChunks*/
        ctx2[5];
      if (dirty & /*resource*/
      2)
        day_changes.resource = /*resource*/
        ctx2[1];
      day.$set(day_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(day.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(day.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      unassign_day();
      destroy_component(day, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block5.name,
    type: "each",
    source: "(70:0) {#each dates as date, i}",
    ctx
  });
  return block;
}
function create_fragment8(ctx) {
  let each_1_anchor;
  let current;
  let mounted;
  let dispose;
  let each_value = ensure_array_like_dev(
    /*dates*/
    ctx[0]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  const block = {
    c: function create() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    l: function claim(nodes) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(nodes);
      }
      each_1_anchor = empty();
    },
    m: function mount(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert_hydration_dev(target, each_1_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen_dev(
          window,
          "resize",
          /*reposition*/
          ctx[12],
          false,
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*dates, chunks, bgChunks, longChunks, iChunks, resource, refs*/
      127) {
        each_value = ensure_array_like_dev(
          /*dates*/
          ctx2[0]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block5(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment8.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance8($$self, $$props, $$invalidate) {
  let $hiddenDays;
  let $_iEvents;
  let $_events;
  let $resources;
  let $filterEventsWithResources;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Week", slots, []);
  let { dates } = $$props;
  let { resource = void 0 } = $$props;
  let { _events, _iEvents, _queue2, hiddenDays, resources, filterEventsWithResources } = getContext("state");
  validate_store(_events, "_events");
  component_subscribe($$self, _events, (value) => $$invalidate(18, $_events = value));
  validate_store(_iEvents, "_iEvents");
  component_subscribe($$self, _iEvents, (value) => $$invalidate(17, $_iEvents = value));
  validate_store(hiddenDays, "hiddenDays");
  component_subscribe($$self, hiddenDays, (value) => $$invalidate(16, $hiddenDays = value));
  validate_store(resources, "resources");
  component_subscribe($$self, resources, (value) => $$invalidate(19, $resources = value));
  validate_store(filterEventsWithResources, "filterEventsWithResources");
  component_subscribe($$self, filterEventsWithResources, (value) => $$invalidate(20, $filterEventsWithResources = value));
  let chunks, bgChunks, longChunks, iChunks = [];
  let start;
  let end;
  let refs = [];
  let resourceFilter;
  let debounceHandle = {};
  function reposition() {
    debounce(() => runReposition(refs, dates), debounceHandle, _queue2);
  }
  $$self.$$.on_mount.push(function() {
    if (dates === void 0 && !("dates" in $$props || $$self.$$.bound[$$self.$$.props["dates"]])) {
      console.warn("<Week> was created without expected prop 'dates'");
    }
  });
  const writable_props = ["dates", "resource"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Week> was created with unknown prop '${key}'`);
  });
  function day_binding($$value, i) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      refs[i] = $$value;
      $$invalidate(6, refs);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("dates" in $$props2)
      $$invalidate(0, dates = $$props2.dates);
    if ("resource" in $$props2)
      $$invalidate(1, resource = $$props2.resource);
  };
  $$self.$capture_state = () => ({
    getContext,
    cloneDate,
    addDay,
    createEventChunk,
    prepareEventChunks,
    eventIntersects,
    debounce,
    runReposition,
    bgEvent,
    Day: Day_default2,
    dates,
    resource,
    _events,
    _iEvents,
    _queue2,
    hiddenDays,
    resources,
    filterEventsWithResources,
    chunks,
    bgChunks,
    longChunks,
    iChunks,
    start,
    end,
    refs,
    resourceFilter,
    debounceHandle,
    reposition,
    $hiddenDays,
    $_iEvents,
    $_events,
    $resources,
    $filterEventsWithResources
  });
  $$self.$inject_state = ($$props2) => {
    if ("dates" in $$props2)
      $$invalidate(0, dates = $$props2.dates);
    if ("resource" in $$props2)
      $$invalidate(1, resource = $$props2.resource);
    if ("_events" in $$props2)
      $$invalidate(7, _events = $$props2._events);
    if ("_iEvents" in $$props2)
      $$invalidate(8, _iEvents = $$props2._iEvents);
    if ("_queue2" in $$props2)
      _queue2 = $$props2._queue2;
    if ("hiddenDays" in $$props2)
      $$invalidate(9, hiddenDays = $$props2.hiddenDays);
    if ("resources" in $$props2)
      $$invalidate(10, resources = $$props2.resources);
    if ("filterEventsWithResources" in $$props2)
      $$invalidate(11, filterEventsWithResources = $$props2.filterEventsWithResources);
    if ("chunks" in $$props2)
      $$invalidate(2, chunks = $$props2.chunks);
    if ("bgChunks" in $$props2)
      $$invalidate(3, bgChunks = $$props2.bgChunks);
    if ("longChunks" in $$props2)
      $$invalidate(4, longChunks = $$props2.longChunks);
    if ("iChunks" in $$props2)
      $$invalidate(5, iChunks = $$props2.iChunks);
    if ("start" in $$props2)
      $$invalidate(13, start = $$props2.start);
    if ("end" in $$props2)
      $$invalidate(14, end = $$props2.end);
    if ("refs" in $$props2)
      $$invalidate(6, refs = $$props2.refs);
    if ("resourceFilter" in $$props2)
      $$invalidate(15, resourceFilter = $$props2.resourceFilter);
    if ("debounceHandle" in $$props2)
      debounceHandle = $$props2.debounceHandle;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*dates*/
    1) {
      $: {
        $$invalidate(13, start = dates[0]);
        $$invalidate(14, end = addDay(cloneDate(dates.at(-1))));
      }
    }
    if ($$self.$$.dirty & /*resource, $filterEventsWithResources, $resources*/
    1572866) {
      $:
        $$invalidate(15, resourceFilter = resource ?? ($filterEventsWithResources ? $resources : void 0));
    }
    if ($$self.$$.dirty & /*$_events, start, end, resourceFilter, bgChunks, chunks, $hiddenDays*/
    385036) {
      $: {
        $$invalidate(2, chunks = []);
        $$invalidate(3, bgChunks = []);
        for (let event of $_events) {
          if (event.allDay && eventIntersects(event, start, end, resourceFilter)) {
            let chunk = createEventChunk(event, start, end);
            if (bgEvent(event.display)) {
              bgChunks.push(chunk);
            } else {
              chunks.push(chunk);
            }
          }
        }
        prepareEventChunks(bgChunks, $hiddenDays);
        $$invalidate(4, longChunks = prepareEventChunks(chunks, $hiddenDays));
        reposition();
      }
    }
    if ($$self.$$.dirty & /*$_iEvents, start, end, resource, $hiddenDays*/
    221186) {
      $:
        $$invalidate(5, iChunks = $_iEvents.map((event) => {
          let chunk;
          if (event && event.allDay && eventIntersects(event, start, end, resource)) {
            chunk = createEventChunk(event, start, end);
            prepareEventChunks([chunk], $hiddenDays);
          } else {
            chunk = null;
          }
          return chunk;
        }));
    }
  };
  return [
    dates,
    resource,
    chunks,
    bgChunks,
    longChunks,
    iChunks,
    refs,
    _events,
    _iEvents,
    hiddenDays,
    resources,
    filterEventsWithResources,
    reposition,
    start,
    end,
    resourceFilter,
    $hiddenDays,
    $_iEvents,
    $_events,
    $resources,
    $filterEventsWithResources,
    day_binding
  ];
}
var Week = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance8, create_fragment8, safe_not_equal, { dates: 0, resource: 1 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Week",
      options,
      id: create_fragment8.name
    });
  }
  get dates() {
    throw new Error("<Week>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set dates(value) {
    throw new Error("<Week>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get resource() {
    throw new Error("<Week>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set resource(value) {
    throw new Error("<Week>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Week_default = Week;

// node_modules/@event-calendar/time-grid/src/View.svelte
var file8 = "node_modules/@event-calendar/time-grid/src/View.svelte";
function get_each_context6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function get_each_context_13(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function create_each_block_13(ctx) {
  let div;
  let time;
  let time_datetime_value;
  let time_aria_label_value;
  let setContent_action;
  let t;
  let div_class_value;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div = element("div");
      time = element("time");
      t = space();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true, role: true });
      var div_nodes = children(div);
      time = claim_element(div_nodes, "TIME", { datetime: true, "aria-label": true });
      children(time).forEach(detach_dev);
      t = claim_space(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      var _a;
      attr_dev(time, "datetime", time_datetime_value = toISOString(
        /*date*/
        ctx[10],
        10
      ));
      attr_dev(time, "aria-label", time_aria_label_value = /*$_intlDayHeaderAL*/
      ctx[2].format(
        /*date*/
        ctx[10]
      ));
      add_location(time, file8, 15, 16, 580);
      attr_dev(div, "class", div_class_value = /*$theme*/
      ctx[0].day + " " + /*$theme*/
      ((_a = ctx[0].weekdays) == null ? void 0 : _a[
        /*date*/
        ctx[10].getUTCDay()
      ]));
      attr_dev(div, "role", "columnheader");
      add_location(div, file8, 14, 12, 479);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      append_hydration_dev(div, time);
      append_hydration_dev(div, t);
      if (!mounted) {
        dispose = action_destroyer(setContent_action = setContent.call(
          null,
          time,
          /*$_intlDayHeader*/
          ctx[3].format(
            /*date*/
            ctx[10]
          )
        ));
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      var _a;
      ctx = new_ctx;
      if (dirty & /*$_viewDates*/
      2 && time_datetime_value !== (time_datetime_value = toISOString(
        /*date*/
        ctx[10],
        10
      ))) {
        attr_dev(time, "datetime", time_datetime_value);
      }
      if (dirty & /*$_intlDayHeaderAL, $_viewDates*/
      6 && time_aria_label_value !== (time_aria_label_value = /*$_intlDayHeaderAL*/
      ctx[2].format(
        /*date*/
        ctx[10]
      ))) {
        attr_dev(time, "aria-label", time_aria_label_value);
      }
      if (setContent_action && is_function(setContent_action.update) && dirty & /*$_intlDayHeader, $_viewDates*/
      10)
        setContent_action.update.call(
          null,
          /*$_intlDayHeader*/
          ctx[3].format(
            /*date*/
            ctx[10]
          )
        );
      if (dirty & /*$theme, $_viewDates*/
      3 && div_class_value !== (div_class_value = /*$theme*/
      ctx[0].day + " " + /*$theme*/
      ((_a = ctx[0].weekdays) == null ? void 0 : _a[
        /*date*/
        ctx[10].getUTCDay()
      ]))) {
        attr_dev(div, "class", div_class_value);
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block_13.name,
    type: "each",
    source: "(14:8) {#each $_viewDates as date}",
    ctx
  });
  return block;
}
function create_default_slot_2(ctx) {
  let each_1_anchor;
  let each_value_1 = ensure_array_like_dev(
    /*$_viewDates*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_13(get_each_context_13(ctx, each_value_1, i));
  }
  const block = {
    c: function create() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    l: function claim(nodes) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(nodes);
      }
      each_1_anchor = empty();
    },
    m: function mount(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert_hydration_dev(target, each_1_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*$theme, $_viewDates, $_intlDayHeaderAL, $_intlDayHeader*/
      15) {
        each_value_1 = ensure_array_like_dev(
          /*$_viewDates*/
          ctx2[1]
        );
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_13(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_13(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_2.name,
    type: "slot",
    source: "(13:4) <Section>",
    ctx
  });
  return block;
}
function create_if_block3(ctx) {
  let div2;
  let div1;
  let section;
  let t;
  let div0;
  let div0_class_value;
  let div1_class_value;
  let div2_class_value;
  let current;
  section = new Section_default({
    props: {
      $$slots: { default: [create_default_slot_1] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      div2 = element("div");
      div1 = element("div");
      create_component(section.$$.fragment);
      t = space();
      div0 = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      claim_component(section.$$.fragment, div1_nodes);
      t = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      children(div0).forEach(detach_dev);
      div1_nodes.forEach(detach_dev);
      div2_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", div0_class_value = /*$theme*/
      ctx[0].hiddenScroll);
      add_location(div0, file8, 31, 12, 1093);
      attr_dev(div1, "class", div1_class_value = /*$theme*/
      ctx[0].content);
      add_location(div1, file8, 27, 8, 961);
      attr_dev(div2, "class", div2_class_value = /*$theme*/
      ctx[0].allDay);
      add_location(div2, file8, 26, 4, 923);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div2, anchor);
      append_hydration_dev(div2, div1);
      mount_component(section, div1, null);
      append_hydration_dev(div1, t);
      append_hydration_dev(div1, div0);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const section_changes = {};
      if (dirty & /*$$scope, $_viewDates*/
      32770) {
        section_changes.$$scope = { dirty, ctx: ctx2 };
      }
      section.$set(section_changes);
      if (!current || dirty & /*$theme*/
      1 && div0_class_value !== (div0_class_value = /*$theme*/
      ctx2[0].hiddenScroll)) {
        attr_dev(div0, "class", div0_class_value);
      }
      if (!current || dirty & /*$theme*/
      1 && div1_class_value !== (div1_class_value = /*$theme*/
      ctx2[0].content)) {
        attr_dev(div1, "class", div1_class_value);
      }
      if (!current || dirty & /*$theme*/
      1 && div2_class_value !== (div2_class_value = /*$theme*/
      ctx2[0].allDay)) {
        attr_dev(div2, "class", div2_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(section.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(section.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div2);
      }
      destroy_component(section);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block3.name,
    type: "if",
    source: "(26:0) {#if $allDaySlot}",
    ctx
  });
  return block;
}
function create_default_slot_1(ctx) {
  let week;
  let current;
  week = new Week_default({
    props: { dates: (
      /*$_viewDates*/
      ctx[1]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(week.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(week.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(week, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const week_changes = {};
      if (dirty & /*$_viewDates*/
      2)
        week_changes.dates = /*$_viewDates*/
        ctx2[1];
      week.$set(week_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(week.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(week.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(week, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1.name,
    type: "slot",
    source: "(29:12) <Section>",
    ctx
  });
  return block;
}
function create_each_block6(ctx) {
  let day;
  let current;
  day = new Day_default({
    props: { date: (
      /*date*/
      ctx[10]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(day.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(day.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(day, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const day_changes = {};
      if (dirty & /*$_viewDates*/
      2)
        day_changes.date = /*date*/
        ctx2[10];
      day.$set(day_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(day.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(day.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(day, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block6.name,
    type: "each",
    source: "(37:0) {#each $_viewDates as date}",
    ctx
  });
  return block;
}
function create_default_slot2(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like_dev(
    /*$_viewDates*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block6(get_each_context6(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  const block = {
    c: function create() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    l: function claim(nodes) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(nodes);
      }
      each_1_anchor = empty();
    },
    m: function mount(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert_hydration_dev(target, each_1_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*$_viewDates*/
      2) {
        each_value = ensure_array_like_dev(
          /*$_viewDates*/
          ctx2[1]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context6(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block6(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot2.name,
    type: "slot",
    source: "(36:0) <Body>",
    ctx
  });
  return block;
}
function create_fragment9(ctx) {
  let div1;
  let section;
  let t0;
  let div0;
  let div0_class_value;
  let div1_class_value;
  let t1;
  let t2;
  let body;
  let current;
  section = new Section_default({
    props: {
      $$slots: { default: [create_default_slot_2] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  let if_block = (
    /*$allDaySlot*/
    ctx[4] && create_if_block3(ctx)
  );
  body = new Body_default({
    props: {
      $$slots: { default: [create_default_slot2] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      div1 = element("div");
      create_component(section.$$.fragment);
      t0 = space();
      div0 = element("div");
      t1 = space();
      if (if_block)
        if_block.c();
      t2 = space();
      create_component(body.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      claim_component(section.$$.fragment, div1_nodes);
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      children(div0).forEach(detach_dev);
      div1_nodes.forEach(detach_dev);
      t1 = claim_space(nodes);
      if (if_block)
        if_block.l(nodes);
      t2 = claim_space(nodes);
      claim_component(body.$$.fragment, nodes);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", div0_class_value = /*$theme*/
      ctx[0].hiddenScroll);
      add_location(div0, file8, 23, 4, 852);
      attr_dev(div1, "class", div1_class_value = /*$theme*/
      ctx[0].header);
      add_location(div1, file8, 11, 0, 387);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div1, anchor);
      mount_component(section, div1, null);
      append_hydration_dev(div1, t0);
      append_hydration_dev(div1, div0);
      insert_hydration_dev(target, t1, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, t2, anchor);
      mount_component(body, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const section_changes = {};
      if (dirty & /*$$scope, $_viewDates, $theme, $_intlDayHeaderAL, $_intlDayHeader*/
      32783) {
        section_changes.$$scope = { dirty, ctx: ctx2 };
      }
      section.$set(section_changes);
      if (!current || dirty & /*$theme*/
      1 && div0_class_value !== (div0_class_value = /*$theme*/
      ctx2[0].hiddenScroll)) {
        attr_dev(div0, "class", div0_class_value);
      }
      if (!current || dirty & /*$theme*/
      1 && div1_class_value !== (div1_class_value = /*$theme*/
      ctx2[0].header)) {
        attr_dev(div1, "class", div1_class_value);
      }
      if (
        /*$allDaySlot*/
        ctx2[4]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$allDaySlot*/
          16) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block3(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const body_changes = {};
      if (dirty & /*$$scope, $_viewDates*/
      32770) {
        body_changes.$$scope = { dirty, ctx: ctx2 };
      }
      body.$set(body_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(section.$$.fragment, local);
      transition_in(if_block);
      transition_in(body.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(section.$$.fragment, local);
      transition_out(if_block);
      transition_out(body.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div1);
        detach_dev(t1);
        detach_dev(t2);
      }
      destroy_component(section);
      if (if_block)
        if_block.d(detaching);
      destroy_component(body, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment9.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance9($$self, $$props, $$invalidate) {
  let $theme;
  let $_viewDates;
  let $_intlDayHeaderAL;
  let $_intlDayHeader;
  let $allDaySlot;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("View", slots, []);
  let { _viewDates, _intlDayHeader, _intlDayHeaderAL, allDaySlot, theme } = getContext("state");
  validate_store(_viewDates, "_viewDates");
  component_subscribe($$self, _viewDates, (value) => $$invalidate(1, $_viewDates = value));
  validate_store(_intlDayHeader, "_intlDayHeader");
  component_subscribe($$self, _intlDayHeader, (value) => $$invalidate(3, $_intlDayHeader = value));
  validate_store(_intlDayHeaderAL, "_intlDayHeaderAL");
  component_subscribe($$self, _intlDayHeaderAL, (value) => $$invalidate(2, $_intlDayHeaderAL = value));
  validate_store(allDaySlot, "allDaySlot");
  component_subscribe($$self, allDaySlot, (value) => $$invalidate(4, $allDaySlot = value));
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(0, $theme = value));
  const writable_props = [];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<View> was created with unknown prop '${key}'`);
  });
  $$self.$capture_state = () => ({
    getContext,
    setContent,
    toISOString,
    Section: Section_default,
    Body: Body_default,
    Day: Day_default,
    Week: Week_default,
    _viewDates,
    _intlDayHeader,
    _intlDayHeaderAL,
    allDaySlot,
    theme,
    $theme,
    $_viewDates,
    $_intlDayHeaderAL,
    $_intlDayHeader,
    $allDaySlot
  });
  $$self.$inject_state = ($$props2) => {
    if ("_viewDates" in $$props2)
      $$invalidate(5, _viewDates = $$props2._viewDates);
    if ("_intlDayHeader" in $$props2)
      $$invalidate(6, _intlDayHeader = $$props2._intlDayHeader);
    if ("_intlDayHeaderAL" in $$props2)
      $$invalidate(7, _intlDayHeaderAL = $$props2._intlDayHeaderAL);
    if ("allDaySlot" in $$props2)
      $$invalidate(8, allDaySlot = $$props2.allDaySlot);
    if ("theme" in $$props2)
      $$invalidate(9, theme = $$props2.theme);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    $theme,
    $_viewDates,
    $_intlDayHeaderAL,
    $_intlDayHeader,
    $allDaySlot,
    _viewDates,
    _intlDayHeader,
    _intlDayHeaderAL,
    allDaySlot,
    theme
  ];
}
var View = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance9, create_fragment9, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "View",
      options,
      id: create_fragment9.name
    });
  }
};
var View_default = View;

// node_modules/@event-calendar/time-grid/src/index.js
var src_default = {
  createOptions(options) {
    options.buttonText.timeGridDay = "day";
    options.buttonText.timeGridWeek = "week";
    options.view = "timeGridWeek";
    options.views.timeGridDay = {
      buttonText: btnTextDay,
      component: View_default,
      dayHeaderFormat: { weekday: "long" },
      duration: { days: 1 },
      theme: themeView("ec-time-grid ec-day-view"),
      titleFormat: { year: "numeric", month: "long", day: "numeric" }
    };
    options.views.timeGridWeek = {
      buttonText: btnTextWeek,
      component: View_default,
      duration: { weeks: 1 },
      theme: themeView("ec-time-grid ec-week-view")
    };
  },
  createStores(state) {
    state._slotTimeLimits = slotTimeLimits(state);
    state._times = times(state);
  }
};
export {
  Body_default as Body,
  Day_default as Day,
  Section_default as Section,
  Week_default as Week,
  src_default as default
};
//# sourceMappingURL=@event-calendar_time-grid.js.map
